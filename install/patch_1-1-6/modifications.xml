<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.elkarte.net/site/modification">
<modification xmlns="http://www.elkarte.net/site/modification" xmlns:elk="http://www.elkarte.net/">

	<id>Elkarte Contributors:ElkArte_116_patch</id>
	<version>1.0</version>
	<file name="BOARDDIR/SSI.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[}

error_reporting($ssi_error_reporting);
if (function_exists('set_magic_quotes_runtime'))
{
	@set_magic_quotes_runtime($ssi_magic_quotes_runtime);
}

return true;
]]></search>
			<add><![CDATA[}

error_reporting($ssi_error_reporting);

return true;
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			COALESCE(lt.id_msg, lmr.id_msg, 0) >= m.id_msg_modified AS is_read,
			COALESCE(lt.id_msg, lmr.id_msg, -1) + 1 AS new_from') . ', ' . ($limit_body ? 'SUBSTRING(m.body, 1, 384) AS body' : 'm.body') . ', m.smileys_enabled
		FROM {db_prefix}messages AS m
			INNER JOIN {db_prefix}boards AS b ON (b.id_board = m.id_board)
			LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)' . (!$user_info['is_guest'] ? '
			LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = m.id_topic AND lt.id_member = {int:current_member})
			LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = m.id_board AND lmr.id_member = {int:current_member})' : '') . '
		WHERE 1=1 ' . ($override_permissions ? '' : '
			AND {query_wanna_see_board}') . ($modSettings['postmod_active'] ? '
			AND m.approved = {int:is_approved}' : '') . '
		' . (empty($query_where) ? '' : 'AND ' . $query_where) . '
		ORDER BY ' . $query_order . '
		' . (empty($query_limit) ? '' : 'LIMIT {int:query_limit}'),]]></search>
			<add><![CDATA[			COALESCE(lt.id_msg, lmr.id_msg, 0) >= m.id_msg_modified AS is_read,
			COALESCE(lt.id_msg, lmr.id_msg, -1) + 1 AS new_from') . ', ' . ($limit_body ? 'SUBSTRING(m.body, 1, 384) AS body' : 'm.body') . ', m.smileys_enabled
		FROM {db_prefix}messages AS m
			JOIN {db_prefix}boards AS b ON (b.id_board = m.id_board)
			JOIN {db_prefix}topics AS t ON (t.id_topic = m.id_topic)
			LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)' . (!$user_info['is_guest'] ? '
			LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = m.id_topic AND lt.id_member = {int:current_member})
			LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = m.id_board AND lmr.id_member = {int:current_member})' : '') . '
		WHERE 1=1 ' . ($override_permissions ? '' : '
			AND {query_wanna_see_board}') . ($modSettings['postmod_active'] ? '
			AND m.approved = {int:is_approved}
			AND t.approved = {int:is_approved}' : '') . '
		' . (empty($query_where) ? '' : 'AND ' . $query_where) . '
		ORDER BY ' . $query_order . '
		' . (empty($query_limit) ? '' : 'LIMIT {int:query_limit}'),]]></add>
		</operation>
	</file>
	<file name="BOARDDIR/bootstrap.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		define('ELKBOOT', '1');

		// The software version
		define('FORUM_VERSION', 'ElkArte 1.1.5');

		// Shortcut for the browser cache stale
		define('CACHE_STALE', '?R115');
	}

	/**]]></search>
			<add><![CDATA[		define('ELKBOOT', '1');

		// The software version
		define('FORUM_VERSION', 'ElkArte 1.1.6');

		// Shortcut for the browser cache stale
		define('CACHE_STALE', '?R116');
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// First thing: if the install dir exists, just send anybody there
		// The ignore_install_dir var is for developers only. Do not add it on production sites
		if (file_exists('install'))
		{
			if (file_exists($settings_loc))
			{]]></search>
			<add><![CDATA[
		// First thing: if the install dir exists, just send anybody there
		// The ignore_install_dir var is for developers only. Do not add it on production sites
		if (file_exists('install') && (file_exists('install/install.php') || file_exists('install/upgrade.php')))
		{
			if (file_exists($settings_loc))
			{]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/Session.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	@ini_set('session.use_trans_sid', false);
	@ini_set('arg_separator.output', '&amp;');

	if (!empty($modSettings['globalCookies']))
	{
		$parsed_url = parse_url($boardurl);]]></search>
			<add><![CDATA[	@ini_set('session.use_trans_sid', false);
	@ini_set('arg_separator.output', '&amp;');

	// Secure PHPSESSIONID
	if (parse_url($boardurl, PHP_URL_SCHEME) === 'https')
		@ini_set('session.cookie_secure', true);

	if (!empty($modSettings['globalCookies']))
	{
		$parsed_url = parse_url($boardurl);]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/Templates.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	protected function __construct()
	{
		// We want to be able to figure out any errors...
		@ini_set('track_errors', '1');
	}

	/**]]></search>
			<add><![CDATA[	protected function __construct()
	{
		// We want to be able to figure out any errors...
		if (version_compare(PHP_VERSION, '7.0.0', '>='))
		{
			error_clear_last();
		}
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			$error = fetch_web_data($boardurl . strtr($filename, array(BOARDDIR => '', strtr(BOARDDIR, '\\', '/') => '')));
			$last_error = error_get_last();
			if (empty($error) && ini_get('track_errors') && !empty($last_error['message']))
			{
				$error = $last_error['message'];
			}]]></search>
			<add><![CDATA[
			$error = fetch_web_data($boardurl . strtr($filename, array(BOARDDIR => '', strtr(BOARDDIR, '\\', '/') => '')));
			$last_error = error_get_last();
			if (empty($error) && !empty($last_error['message']))
			{
				$error = $last_error['message'];
			}]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/Admin.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Set the subaction
		$action = new Action();
		$subAction = $action->initialize($subActions, 'internal');

		// Keep track of what the admin wants in terms of advanced or not]]></search>
			<add><![CDATA[		);

		// Set the subaction
		$action = new Action('admin_search');
		$subAction = $action->initialize($subActions, 'internal');

		// Keep track of what the admin wants in terms of advanced or not]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/Maintenance.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Check few things to give advices before make a backup
		// If safe mod is enable the external tool is *always* the best (and probably the only) solution
		$context['safe_mode_enable'] = @ini_get('safe_mode');

		// This is just a...guess
		$messages = countMessages();]]></search>
			<add><![CDATA[
		// Check few things to give advices before make a backup
		// If safe mod is enable the external tool is *always* the best (and probably the only) solution
		$context['safe_mode_enable'] = false;
		if (version_compare(PHP_VERSION, '5.4.0', '<'))
		{
			$context['safe_mode_enable'] = @ini_get('safe_mode');
		}

		// This is just a...guess
		$messages = countMessages();]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageAttachments.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			}

			// Changing the attachment upload directory
			if (isset($this->_req->post->attachmentUploadDir))
			{
				if (!empty($this->_req->post->attachmentUploadDir) && file_exists($modSettings['attachmentUploadDir']) && $modSettings['attachmentUploadDir'] != $this->_req->post->attachmentUploadDir)
					rename($modSettings['attachmentUploadDir'], $this->_req->post->attachmentUploadDir);]]></search>
			<add><![CDATA[			}

			// Changing the attachment upload directory
			if (isset($this->_req->post->attachmentUploadDir)
				|| !empty($this->_req->post->use_subdirectories_for_attachments))
			{
				if (!empty($this->_req->post->attachmentUploadDir) && file_exists($modSettings['attachmentUploadDir']) && $modSettings['attachmentUploadDir'] != $this->_req->post->attachmentUploadDir)
					rename($modSettings['attachmentUploadDir'], $this->_req->post->attachmentUploadDir);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$use_subdirectories_for_attachments = 0;
					if (!empty($modSettings['attachment_basedirectories']))
						foreach ($modSettings['attachment_basedirectories'] as $bid => $base)
							if (strpos($modSettings['attachmentUploadDir'][$this->current_dir], $base . DIRECTORY_SEPARATOR) !== false)
							{
								$use_subdirectories_for_attachments = 1;
								break;
							}

					if ($use_subdirectories_for_attachments == 0 && strpos($modSettings['attachmentUploadDir'][$this->current_dir], BOARDDIR . DIRECTORY_SEPARATOR) !== false)
						$bid = 0;]]></search>
			<add><![CDATA[					$use_subdirectories_for_attachments = 0;
					if (!empty($modSettings['attachment_basedirectories']))
						foreach ($modSettings['attachment_basedirectories'] as $bid => $base)
						{
							if (strpos($modSettings['attachmentUploadDir'][$this->current_dir], $base . DIRECTORY_SEPARATOR) !== false)
							{
								$use_subdirectories_for_attachments = 1;
								break;
							}
						}

					if ($use_subdirectories_for_attachments == 0 && strpos($modSettings['attachmentUploadDir'][$this->current_dir], BOARDDIR . DIRECTORY_SEPARATOR) !== false)
						$bid = 0;]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageBans.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Start up the controller
		$action = new Action();

		// Default the sub-action to 'view ban list'.
		$subAction = $this->_req->getQuery('sa', 'strval', 'list');]]></search>
			<add><![CDATA[		);

		// Start up the controller
		$action = new Action('manage_bans');

		// Default the sub-action to 'view ban list'.
		$subAction = $this->_req->getQuery('sa', 'strval', 'list');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							'class' => 'submitbutton',
							'value' => '
								<input type="submit" name="remove_selection" value="' . $txt['ban_remove_selected_triggers'] . '" class="right_submit" />
								<a class="linkbutton" href="' . $scripturl . '?action=admin;area=ban;sa=edittrigger;bg=' . $ban_group_id . '">' . $txt['ban_add_trigger'] . '</a>
								<input type="hidden" name="bg" value="' . $ban_group_id . '" />
								<input type="hidden" name="' . $context['session_var'] . '" value="' . $context['session_id'] . '" />
								<input type="hidden" name="' . $context['admin-bet_token_var'] . '" value="' . $context['admin-bet_token'] . '" />',]]></search>
			<add><![CDATA[							'class' => 'submitbutton',
							'value' => '
								<input type="submit" name="remove_selection" value="' . $txt['ban_remove_selected_triggers'] . '" class="right_submit" />
								<a class="linkbutton_right" href="' . $scripturl . '?action=admin;area=ban;sa=edittrigger;bg=' . $ban_group_id . '">' . $txt['ban_add_trigger'] . '</a>
								<input type="hidden" name="bg" value="' . $ban_group_id . '" />
								<input type="hidden" name="' . $context['session_var'] . '" value="' . $context['session_id'] . '" />
								<input type="hidden" name="' . $context['admin-bet_token_var'] . '" value="' . $context['admin-bet_token'] . '" />',]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		require_once(SUBSDIR . '/Bans.subs.php');

		$ban_group = $this->_req->getQuery('bg', 'intval', 0);
		$ban_id = $this->_req->getQuery('bi', 'intval', 0);

		if (empty($ban_group))
			throw new Elk_Exception('ban_not_found', false);]]></search>
			<add><![CDATA[
		require_once(SUBSDIR . '/Bans.subs.php');

		$ban_group = $this->_req->get('bg', 'intval', 0);
		$ban_id = $this->_req->get('bi', 'intval', 0);

		if (empty($ban_group))
			throw new Elk_Exception('ban_not_found', false);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// The first replaces the old one, the others are added new
			// (simplification, otherwise it would require another query and some work...)
			$dummy = (array) $this->_req->post;
			$dummy['ban_suggestions'] = array_shift($this->_req->post->ban_suggestions);
			saveTriggers($dummy, $ban_group, 0, $ban_id);
			if (!empty($this->_req->post->ban_suggestions))
				saveTriggers((array) $this->_req->post, $ban_group);]]></search>
			<add><![CDATA[			// The first replaces the old one, the others are added new
			// (simplification, otherwise it would require another query and some work...)
			$dummy = (array) $this->_req->post;
			$dummy['ban_suggestions'] = (array) array_shift($this->_req->post->ban_suggestions);
			saveTriggers($dummy, $ban_group, 0, $ban_id);
			if (!empty($this->_req->post->ban_suggestions))
				saveTriggers((array) $this->_req->post, $ban_group);]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageNews.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['recipients']['groups'] = !empty($this->_req->post->groups) ? explode(',', $this->_req->post->groups) : array();
			$context['recipients']['exclude_groups'] = !empty($this->_req->post->exclude_groups) ? explode(',', $this->_req->post->exclude_groups) : array();
			$context['recipients']['emails'] = !empty($this->_req->post->emails) ? explode(';', $this->_req->post->emails) : array();
			$context['email_force'] = $this->_req->getPost('email_force', 'intval', 0);
			$context['total_emails'] = $this->_req->getPost('total_emails', 'intval', 0);
			$context['max_id_member'] = $this->_req->getPost('max_id_member', 'intval', 0);
			$context['send_pm'] = $this->_req->getPost('send_pm', 'intval', 0);
			$context['send_html'] = $this->_req->getPost('send_html', 'intval', 0);

			prepareMailingForPreview();
			return null;]]></search>
			<add><![CDATA[			$context['recipients']['groups'] = !empty($this->_req->post->groups) ? explode(',', $this->_req->post->groups) : array();
			$context['recipients']['exclude_groups'] = !empty($this->_req->post->exclude_groups) ? explode(',', $this->_req->post->exclude_groups) : array();
			$context['recipients']['emails'] = !empty($this->_req->post->emails) ? explode(';', $this->_req->post->emails) : array();
			$context['email_force'] = $this->_req->getPost('email_force', 'isset', false);
			$context['total_emails'] = $this->_req->getPost('total_emails', 'intval', 0);
			$context['max_id_member'] = $this->_req->getPost('max_id_member', 'intval', 0);
			$context['send_pm'] = $this->_req->getPost('send_pm', 'isset', false);
			$context['send_html'] = $this->_req->getPost('send_html', 'isset', false);

			prepareMailingForPreview();
			return null;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Where are we actually to?
		$context['start'] = $this->_req->getPost('start', 'intval', 0);
		$context['email_force'] = $this->_req->getPost('email_force', 'intval', 0);
		$context['total_emails'] = $this->_req->getPost('total_emails', 'intval', 0);
		$context['max_id_member'] = $this->_req->getPost('max_id_member', 'intval', 0);
		$context['send_pm'] = $this->_req->getPost('send_pm', 'intval', 0);
		$context['send_html'] = $this->_req->getPost('send_html', 'intval', 0);
		$context['parse_html'] = $this->_req->getPost('parse_html', 'intval', 0);

		// Create our main context.
		$context['recipients'] = array(]]></search>
			<add><![CDATA[
		// Where are we actually to?
		$context['start'] = $this->_req->getPost('start', 'intval', 0);
		$context['email_force'] = $this->_req->getPost('email_force', 'isset', false);
		$context['total_emails'] = $this->_req->getPost('total_emails', 'intval', 0);
		$context['max_id_member'] = $this->_req->getPost('max_id_member', 'intval', 0);
		$context['send_pm'] = $this->_req->getPost('send_pm', 'isset', false);
		$context['send_html'] = $this->_req->getPost('send_html', 'isset', false);
		$context['parse_html'] = $this->_req->getPost('parse_html', 'isset', false);

		// Create our main context.
		$context['recipients'] = array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['message'] = htmlspecialchars($base_message, ENT_COMPAT, 'UTF-8');

		// Prepare the message for sending it as HTML
		if (!$context['send_pm'] && !empty($this->_req->post->send_html))
		{
			// Prepare the message for HTML.
			if (!empty($this->_req->post->parse_html))
				$base_message = str_replace(array("\n", '  '), array('<br />' . "\n", '&nbsp; '), $base_message);

			// This is here to prevent spam filters from tagging this as spam.]]></search>
			<add><![CDATA[		$context['message'] = htmlspecialchars($base_message, ENT_COMPAT, 'UTF-8');

		// Prepare the message for sending it as HTML
		if (!$context['send_pm'] && !empty($context['send_html']))
		{
			// Prepare the message for HTML.
			if (!empty($context['parse_html']))
				$base_message = str_replace(array("\n", '  '), array('<br />' . "\n", '&nbsp; '), $base_message);

			// This is here to prevent spam filters from tagging this as spam.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// We might need this in a bit
		$cleanLatestMember = empty($this->_req->post->send_html) || $context['send_pm'] ? un_htmlspecialchars($modSettings['latestRealName']) : $modSettings['latestRealName'];

		// Replace in all the standard things.
		$base_message = str_replace($variables,
			array(
				!empty($this->_req->post->send_html) ? '<a href="' . $scripturl . '">' . $scripturl . '</a>' : $scripturl,
				standardTime(forum_time(), false),
				!empty($this->_req->post->send_html) ? '<a href="' . $scripturl . '?action=profile;u=' . $modSettings['latestMember'] . '">' . $cleanLatestMember . '</a>' : ($context['send_pm'] ? '[url=' . $scripturl . '?action=profile;u=' . $modSettings['latestMember'] . ']' . $cleanLatestMember . '[/url]' : $cleanLatestMember),
				$modSettings['latestMember'],
				$cleanLatestMember
			), $base_message);]]></search>
			<add><![CDATA[		);

		// We might need this in a bit
		$cleanLatestMember = empty($context['send_html']) || $context['send_pm'] ? un_htmlspecialchars($modSettings['latestRealName']) : $modSettings['latestRealName'];

		// Replace in all the standard things.
		$base_message = str_replace($variables,
			array(
				!empty($context['send_html']) ? '<a href="' . $scripturl . '">' . $scripturl . '</a>' : $scripturl,
				standardTime(forum_time(), false),
				!empty($context['send_html']) ? '<a href="' . $scripturl . '?action=profile;u=' . $modSettings['latestMember'] . '">' . $cleanLatestMember . '</a>' : ($context['send_pm'] ? '[url=' . $scripturl . '?action=profile;u=' . $modSettings['latestMember'] . ']' . $cleanLatestMember . '[/url]' : $cleanLatestMember),
				$modSettings['latestMember'],
				$cleanLatestMember
			), $base_message);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			$to_member = array(
				$email,
				!empty($this->_req->post->send_html) ? '<a href="mailto:' . $email . '">' . $email . '</a>' : $email,
				'??',
				$email
			);

			sendmail($email, str_replace($from_member, $to_member, $base_subject), str_replace($from_member, $to_member, $base_message), null, null, !empty($this->_req->post->send_html), 5);

			// Done another...
			$i++;]]></search>
			<add><![CDATA[
			$to_member = array(
				$email,
				!empty($context['send_html']) ? '<a href="mailto:' . $email . '">' . $email . '</a>' : $email,
				'??',
				$email
			);

			sendmail($email, str_replace($from_member, $to_member, $base_subject), str_replace($from_member, $to_member, $base_message), null, null, !empty($context['send_html']), 5);

			// Done another...
			$i++;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					continue;

				// We might need this
				$cleanMemberName = empty($this->_req->post->send_html) || $context['send_pm'] ? un_htmlspecialchars($row['real_name']) : $row['real_name'];

				// Replace the member-dependant variables
				$message = str_replace($from_member,
					array(
						$row['email_address'],
						!empty($this->_req->post->send_html) ? '<a href="' . $scripturl . '?action=profile;u=' . $row['id_member'] . '">' . $cleanMemberName . '</a>' : ($context['send_pm'] ? '[url=' . $scripturl . '?action=profile;u=' . $row['id_member'] . ']' . $cleanMemberName . '[/url]' : $cleanMemberName),
						$row['id_member'],
						$cleanMemberName,
					), $base_message);]]></search>
			<add><![CDATA[					continue;

				// We might need this
				$cleanMemberName = empty($context['send_html']) || $context['send_pm'] ? un_htmlspecialchars($row['real_name']) : $row['real_name'];

				// Replace the member-dependant variables
				$message = str_replace($from_member,
					array(
						$row['email_address'],
						!empty($context['send_html']) ? '<a href="' . $scripturl . '?action=profile;u=' . $row['id_member'] . '">' . $cleanMemberName . '</a>' : ($context['send_pm'] ? '[url=' . $scripturl . '?action=profile;u=' . $row['id_member'] . ']' . $cleanMemberName . '[/url]' : $cleanMemberName),
						$row['id_member'],
						$cleanMemberName,
					), $base_message);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
				// Send the actual email - or a PM!
				if (!$context['send_pm'])
					sendmail($row['email_address'], $subject, $message, null, null, !empty($this->_req->post->send_html), 5);
				else
					sendpm(array('to' => array($row['id_member']), 'bcc' => array()), $subject, $message);
			}]]></search>
			<add><![CDATA[
				// Send the actual email - or a PM!
				if (!$context['send_pm'])
					sendmail($row['email_address'], $subject, $message, null, null, !empty($context['send_html']), 5);
				else
					sendpm(array('to' => array($row['id_member']), 'bcc' => array()), $subject, $message);
			}]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManagePermissions.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$context['page_title'] = $txt['permissions_post_moderation'];
		$context['sub_template'] = 'postmod_permissions';
		$context['current_profile'] = $this->_req->getQuery('pid', 'intval', 1);

		// Load all the permission profiles.
		loadPermissionProfiles();]]></search>
			<add><![CDATA[
		$context['page_title'] = $txt['permissions_post_moderation'];
		$context['sub_template'] = 'postmod_permissions';
		$context['current_profile'] = $this->_req->getPost('pid', 'intval', 1);

		// Load all the permission profiles.
		loadPermissionProfiles();]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageSearch.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		if (is_callable(array($searchAPI, 'searchSettings')))
		{
			call_user_func_array($searchAPI->searchSettings);
		}

		// Add new settings with a nice hook, makes them available for admin settings search as well]]></search>
			<add><![CDATA[
		if (is_callable(array($searchAPI, 'searchSettings')))
		{
			call_user_func_array($searchAPI->searchSettings, array());
		}

		// Add new settings with a nice hook, makes them available for admin settings search as well]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			checkSession('get');
			validateToken('admin-msm', 'get');

			$context['fulltext_index'] = true;
			alterFullTextIndex('{db_prefix}messages', 'body', true);
		}
		elseif ($this->_req->getQuery('sa', 'trim', '') === 'removefulltext' && !empty($fulltext_index))
		{]]></search>
			<add><![CDATA[			checkSession('get');
			validateToken('admin-msm', 'get');

			alterFullTextIndex('{db_prefix}messages', 'body', true);
			$fulltext_index = true;
		}
		elseif ($this->_req->getQuery('sa', 'trim', '') === 'removefulltext' && !empty($fulltext_index))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			validateToken('admin-msm', 'get');

			alterFullTextIndex('{db_prefix}messages', $fulltext_index);

			// Go back to the default search method.
			if (!empty($modSettings['search_index']) && $modSettings['search_index'] === 'fulltext')]]></search>
			<add><![CDATA[			validateToken('admin-msm', 'get');

			alterFullTextIndex('{db_prefix}messages', $fulltext_index);
			$fulltext_index = false;

			// Go back to the default search method.
			if (!empty($modSettings['search_index']) && $modSettings['search_index'] === 'fulltext')]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['custom_index'] = !empty($modSettings['search_custom_index_config']);
		$context['partial_custom_index'] = !empty($modSettings['search_custom_index_resume']) && empty($modSettings['search_custom_index_config']);
		$context['double_index'] = !empty($context['fulltext_index']) && $context['custom_index'];

		createToken('admin-msmpost');
		createToken('admin-msm', 'get');]]></search>
			<add><![CDATA[		$context['custom_index'] = !empty($modSettings['search_custom_index_config']);
		$context['partial_custom_index'] = !empty($modSettings['search_custom_index_resume']) && empty($modSettings['search_custom_index_config']);
		$context['double_index'] = !empty($context['fulltext_index']) && $context['custom_index'];
		$context['fulltext_index'] = !empty($fulltext_index);

		createToken('admin-msmpost');
		createToken('admin-msm', 'get');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			checkSession();
			validateToken('admin-mssphinx');

			updateSettings(array(
				'sphinx_index_prefix' => rtrim($this->_req->post->sphinx_index_prefix, '/'),
				'sphinx_data_path' => rtrim($this->_req->post->sphinx_data_path, '/'),
				'sphinx_log_path' => rtrim($this->_req->post->sphinx_log_path, '/'),
				'sphinx_stopword_path' => $this->_req->post->sphinx_stopword_path,
				'sphinx_indexer_mem' => (int) $this->_req->post->sphinx_indexer_mem,
				'sphinx_searchd_server' => $this->_req->post->sphinx_searchd_server,
				'sphinx_searchd_port' => (int) $this->_req->post->sphinx_searchd_port,
				'sphinxql_searchd_port' => (int) $this->_req->post->sphinxql_searchd_port,
				'sphinx_max_results' => (int) $this->_req->post->sphinx_max_results,
			));
		}
		// Checking if we can connect?
		elseif (isset($this->_req->post->checkconnect))]]></search>
			<add><![CDATA[		{
			checkSession();
			validateToken('admin-mssphinx');
			$this->_saveSphinxConfig();
		}
		// Checking if we can connect?
		elseif (isset($this->_req->post->checkconnect))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			checkSession();
			validateToken('admin-mssphinx');
			require_once(SUBSDIR . '/ManageSearch.subs.php');

			createSphinxConfig();]]></search>
			<add><![CDATA[		{
			checkSession();
			validateToken('admin-mssphinx');
			$this->_saveSphinxConfig();

			require_once(SUBSDIR . '/ManageSearch.subs.php');

			createSphinxConfig();]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		createToken('admin-mssphinx');
	}

	/**
	 * Get the installed Search API implementations.
	 *]]></search>
			<add><![CDATA[		createToken('admin-mssphinx');
	}

	/**
	 * Save the form values in modsettings
	 *
	 * @throws \Elk_Exception
	 */
	private function _saveSphinxConfig()
	{
		updateSettings(array(
			'sphinx_index_prefix' => rtrim($this->_req->post->sphinx_index_prefix, '/'),
			'sphinx_data_path' => rtrim($this->_req->post->sphinx_data_path, '/'),
			'sphinx_log_path' => rtrim($this->_req->post->sphinx_log_path, '/'),
			'sphinx_stopword_path' => $this->_req->post->sphinx_stopword_path,
			'sphinx_indexer_mem' => (int) $this->_req->post->sphinx_indexer_mem,
			'sphinx_searchd_server' => $this->_req->post->sphinx_searchd_server,
			'sphinx_searchd_port' => (int) $this->_req->post->sphinx_searchd_port,
			'sphinxql_searchd_port' => (int) $this->_req->post->sphinxql_searchd_port,
			'sphinx_max_results' => (int) $this->_req->post->sphinx_max_results,
		));
	}

	/**
	 * Get the installed Search API implementations.
	 *]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageSecurity.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				array('check', 'badbehavior_verbose', 'postinput' => $txt['badbehavior_default_off']),
				array('check', 'badbehavior_strict', 'postinput' => $txt['badbehavior_default_off']),
				array('check', 'badbehavior_offsite_forms', 'postinput' => $txt['badbehavior_default_off']),
				array('check', 'badbehavior_eucookie', 'postinput' => $txt['badbehavior_default_off']),
			'',
				array('check', 'badbehavior_reverse_proxy', 'postinput' => $txt['badbehavior_default_off']),
				array('text', 'badbehavior_reverse_proxy_header', 30, 'postinput' => $txt['badbehavior_reverse_proxy_header_desc']),]]></search>
			<add><![CDATA[				array('check', 'badbehavior_verbose', 'postinput' => $txt['badbehavior_default_off']),
				array('check', 'badbehavior_strict', 'postinput' => $txt['badbehavior_default_off']),
				array('check', 'badbehavior_offsite_forms', 'postinput' => $txt['badbehavior_default_off']),
			'',
				array('check', 'badbehavior_reverse_proxy', 'postinput' => $txt['badbehavior_default_off']),
				array('text', 'badbehavior_reverse_proxy_header', 30, 'postinput' => $txt['badbehavior_reverse_proxy_header_desc']),]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/PackageActions.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Set up action/subaction stuff.
		$action = new Action();

		foreach ($this->_passed_actions as $this->_action)
		{]]></search>
			<add><![CDATA[		);

		// Set up action/subaction stuff.
		$action = new Action('package_actions_test');

		foreach ($this->_passed_actions as $this->_action)
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$this->failed_steps = array();

		// Set up action/subaction stuff.
		$action = new Action();

		foreach ($this->_passed_actions as $this->_action)
		{]]></search>
			<add><![CDATA[		$this->failed_steps = array();

		// Set up action/subaction stuff.
		$action = new Action('package_actions_install');

		foreach ($this->_passed_actions as $this->_action)
		{]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/Packages.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$context['page_title'] .= ' - ' . $txt['browse_packages'];
		$context['forum_version'] = FORUM_VERSION;
		$installed = $context['sub_action'] === 'installed' ? true : false;
		$context['package_types'] = $installed ? array('modification') : array('modification', 'avatar', 'language', 'smiley', 'unknown');

		foreach ($context['package_types'] as $type)
		{
			// Use the standard templates for showing this.
			$listOptions = array(
				'id' => 'packages_lists_' . $type,
				'title' => $installed ? $txt['view_and_remove'] : $txt[$type . '_package'],
				'no_items_label' => $txt['no_packages'],
				'get_items' => array(
					'function' => array($this, 'list_packages'),]]></search>
			<add><![CDATA[
		$context['page_title'] .= ' - ' . $txt['browse_packages'];
		$context['forum_version'] = FORUM_VERSION;
		$context['available_addon'] = array();
		$context['available_avatar'] = array();
		$context['available_smiley'] = array();
		$context['available_language'] = array();
		$context['available_unknown'] = array();

		$installed = $context['sub_action'] === 'installed' ? true : false;
		$context['package_types'] = $installed ? array('addon') : array('addon', 'avatar', 'language', 'smiley', 'unknown');

		foreach ($context['package_types'] as $type)
		{
			// Use the standard templates for showing this.
			$listOptions = array(
				'id' => 'packages_lists_' . $type,
				'title' => $installed ? $txt['view_and_remove'] : $txt[($type === 'addon' ? 'modification' : $type) . '_package'],
				'no_items_label' => $txt['no_packages'],
				'get_items' => array(
					'function' => array($this, 'list_packages'),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			if ($context['extracted_files'] && !file_exists(BOARDDIR . '/packages/temp/package-info.xml'))
			{
				foreach ($context['extracted_files'] as $file)
					if (basename($file['filename']) === 'package-info.xml')
					{
						$context['base_path'] = dirname($file['filename']) . '/';
						break;
					}
			}

			if (!isset($context['base_path']))]]></search>
			<add><![CDATA[			if ($context['extracted_files'] && !file_exists(BOARDDIR . '/packages/temp/package-info.xml'))
			{
				foreach ($context['extracted_files'] as $file)
				{
					if (basename($file['filename']) === 'package-info.xml')
					{
						$context['base_path'] = dirname($file['filename']) . '/';
						break;
					}
				}
			}

			if (!isset($context['base_path']))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	/**
	 * Get a listing of all the packages
	 *
	 * - Determines if the package is a mod, avatar, language package
	 * - Determines if the package has been installed or not
	 *
	 * @param int $start The item to start with (for pagination purposes)]]></search>
			<add><![CDATA[	/**
	 * Get a listing of all the packages
	 *
	 * - Determines if the package is a ddon, smiley, avatar, language or unknown package
	 * - Determines if the package has been installed or not
	 *
	 * @param int $start The item to start with (for pagination purposes)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$sort_id = 1;
			foreach ($instadds as $installed_add)
			{
				$context['available_modification'][$installed_add['package_id']] = array(
					'sort_id' => $sort_id++,
					'can_uninstall' => true,
					'name' => $installed_add['name'],]]></search>
			<add><![CDATA[			$sort_id = 1;
			foreach ($instadds as $installed_add)
			{
				$context['available_addon'][$installed_add['package_id']] = array(
					'sort_id' => $sort_id++,
					'can_uninstall' => true,
					'name' => $installed_add['name'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			$dirs = array();
			$sort_id = array(
				'mod' => 1,
				'modification' => 1,
				'addon' => 1,
				'avatar' => 1,
				'language' => 1,]]></search>
			<add><![CDATA[
			$dirs = array();
			$sort_id = array(
				'addon' => 1,
				'avatar' => 1,
				'language' => 1,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					// Add-on / Modification
					if ($packageInfo['type'] === 'addon' || $packageInfo['type'] === 'modification' || $packageInfo['type'] === 'mod')
					{
						$sort_id['modification']++;
						$sort_id['mod']++;
						$sort_id['addon']++;
						if ($installed)
						{
							if (!empty($context['available_modification'][$packageInfo['id']]))
							{
								$packages['modification'][strtolower($packageInfo[$sort]) . '_' . $sort_id['mod']] = $packageInfo['id'];
								$context['available_modification'][$packageInfo['id']] = array_merge($context['available_modification'][$packageInfo['id']], $packageInfo);
							}
						}
						else
						{
							$packages['modification'][strtolower($packageInfo[$sort]) . '_' . $sort_id['mod']] = md5($package->getFilename());
							$context['available_modification'][md5($package->getFilename())] = $packageInfo;
						}
					}
					// Avatar package.
					elseif ($packageInfo['type'] === 'avatar')
					{
						$sort_id[$packageInfo['type']]++;
						$packages['avatar'][strtolower($packageInfo[$sort])] = md5($package->getFilename());
						$context['available_avatar'][md5($package->getFilename())] = $packageInfo;
					}
					// Smiley package.
					elseif ($packageInfo['type'] === 'smiley')
					{
						$sort_id[$packageInfo['type']]++;
						$packages['smiley'][strtolower($packageInfo[$sort])] = md5($package->getFilename());
						$context['available_smiley'][md5($package->getFilename())] = $packageInfo;
					}
					// Language package.
					elseif ($packageInfo['type'] === 'language')
					{
						$sort_id[$packageInfo['type']]++;
						$packages['language'][strtolower($packageInfo[$sort])] = md5($package->getFilename());
						$context['available_language'][md5($package->getFilename())] = $packageInfo;
					}
					// Other stuff.
					else
					{
						$sort_id['unknown']++;
						$packages['unknown'][strtolower($packageInfo[$sort])] = md5($package->getFilename());
						$context['available_unknown'][md5($package->getFilename())] = $packageInfo;
					}
				}]]></search>
			<add><![CDATA[					// Add-on / Modification
					if ($packageInfo['type'] === 'addon' || $packageInfo['type'] === 'modification' || $packageInfo['type'] === 'mod')
					{
						$sort_id['addon']++;
						if ($installed)
						{
							if (!empty($context['available_addon'][$packageInfo['id']]))
							{
								$packages['modification'][strtolower($packageInfo[$sort]) . '_' . $sort_id['mod']] = $packageInfo['id'];
								$context['available_addon'][$packageInfo['id']] = array_merge($context['available_addon'][$packageInfo['id']], $packageInfo);
							}
						}
						else
						{
							$packages['addon'][strtolower($packageInfo[$sort]) . '_' . $sort_id['addon']] = md5($package->getFilename());
							$context['available_addon'][md5($package->getFilename())] = $packageInfo;
						}
					}
					// Avatar package.
					elseif ($packageInfo['type'] === 'avatar')
					{
						$sort_id[$packageInfo['type']]++;
						$packages['avatar'][strtolower($packageInfo[$sort]) . '_' . $sort_id['avatar']] = md5($package->getFilename());
						$context['available_avatar'][md5($package->getFilename())] = $packageInfo;
					}
					// Smiley package.
					elseif ($packageInfo['type'] === 'smiley')
					{
						$sort_id[$packageInfo['type']]++;
						$packages['smiley'][strtolower($packageInfo[$sort]) . '_' . $sort_id['smiley']] = md5($package->getFilename());
						$context['available_smiley'][md5($package->getFilename())] = $packageInfo;
					}
					// Language package.
					elseif ($packageInfo['type'] === 'language')
					{
						$sort_id[$packageInfo['type']]++;
						$packages['language'][strtolower($packageInfo[$sort]) . '_' . $sort_id['language']] = md5($package->getFilename());
						$context['available_language'][md5($package->getFilename())] = $packageInfo;
					}
					// Other stuff.
					else
					{
						$sort_id['unknown']++;
						$packages['unknown'][strtolower($packageInfo[$sort]) . '_' . $sort_id['unknown']] = md5($package->getFilename());
						$context['available_unknown'][md5($package->getFilename())] = $packageInfo;
					}
				}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return;

	// Now actually add the data, starting with the folders.
	ksort($foundData['folders']);
	foreach ($foundData['folders'] as $folder => $type)
	{
		$additional_data = array(]]></search>
			<add><![CDATA[		return;

	// Now actually add the data, starting with the folders.
	uksort($foundData['folders'], 'strcasecmp');
	foreach ($foundData['folders'] as $folder => $type)
	{
		$additional_data = array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	// Now we want to do a similar thing with files.
	ksort($foundData['files']);
	$counter = -1;
	foreach ($foundData['files'] as $file => $dummy)
	{]]></search>
			<add><![CDATA[	}

	// Now we want to do a similar thing with files.
	uksort($foundData['files'], 'strcasecmp');
	$counter = -1;
	foreach ($foundData['files'] as $file => $dummy)
	{]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Attachment.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Setup the action handler
		$action = new Action();
		$subAction = $action->initialize($subActions, 'dlattach');

		// Call the action]]></search>
			<add><![CDATA[		);

		// Setup the action handler
		$action = new Action('attachments');
		$subAction = $action->initialize($subActions, 'dlattach');

		// Call the action]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			if (empty($topic) && !empty($id_attach))
			{
				$attachPos = getAttachmentPosition($id_attach);
				if ($attachPos !== false)
				{
					list($id_board, $id_topic) = array_values($attachPos);
				}
				else
				{
					$id_board = 0;
				}
			}
			else
			{]]></search>
			<add><![CDATA[		{
			if (empty($topic) && !empty($id_attach))
			{
				$id_board = 0;
				$id_topic = 0;
				$attachPos = getAttachmentPosition($id_attach);
				if ($attachPos !== false)
				{
					list($id_board, $id_topic) = array_values($attachPos);
				}
			}
			else
			{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				if (empty($attachment[1]))
				{
					$full_attach = getAttachmentFromTopic($id_attach, $id_topic);
					$attachment[1] = $full_attach[1];
					$attachment[4] = 0;
					$attachment[5] = 0;

					// return mime type ala mimetype extension
					$check = returnMimeThumb($full_attach[3]);

					if ($check !== false)
					{]]></search>
			<add><![CDATA[				if (empty($attachment[1]))
				{
					$full_attach = getAttachmentFromTopic($id_attach, $id_topic);
					$attachment[1] = !empty($full_attach[1]) ? $full_attach[1] : '';
					$attachment[4] = 0;
					$attachment[5] = 0;

					// return mime type ala mimetype extension
					$check = returnMimeThumb(!empty($full_attach[3]) ? $full_attach[3] : 'default');

					if ($check !== false)
					{]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Groups.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// I don't think we know what to do... throw dies?
		$action = new Action();
		$subAction = $action->initialize($subActions, 'list');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></search>
			<add><![CDATA[		);

		// I don't think we know what to do... throw dies?
		$action = new Action('groups');
		$subAction = $action->initialize($subActions, 'list');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Members.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// I don't think we know what to do... throw dies?
		$action = new Action();
		$subAction = $action->initialize($subActions, 'none');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></search>
			<add><![CDATA[		);

		// I don't think we know what to do... throw dies?
		$action = new Action('members');
		$subAction = $action->initialize($subActions, 'none');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/MergeTopics.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 * Original module by Mach8 - We'll never forget you.
 * ETA: Sorry, we did.]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 * Original module by Mach8 - We'll never forget you.
 * ETA: Sorry, we did.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// ?action=mergetopics;sa=LETSBREAKIT won't work, sorry.
		$action = new Action();
		$subAction = $action->initialize($subActions, 'index');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></search>
			<add><![CDATA[		);

		// ?action=mergetopics;sa=LETSBREAKIT won't work, sorry.
		$action = new Action('merge_topics');
		$subAction = $action->initialize($subActions, 'index');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/MessageIndex.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						break;
					case 'move':
						if (isset($this->_req->query->current_board))
							moveTopicConcurrence((int) $this->_req->query->current_board);

						// $moveCache[0] is the topic, $moveCache[1] is the board to move to.
						$moveCache[1][$row['id_topic']] = (int) (isset($this->_req->post->move_tos[$row['id_topic']]) ? $this->_req->post->move_tos[$row['id_topic']] : $this->_req->post->move_to);

						if (empty($moveCache[1][$row['id_topic']]))
							continue;

						$moveCache[0][] = $row['id_topic'];
						break;
					case 'remove':
						$removeCache[] = $row['id_topic'];]]></search>
			<add><![CDATA[						break;
					case 'move':
						if (isset($this->_req->query->current_board))
						{
							moveTopicConcurrence((int) $this->_req->query->current_board);
						}

						// $moveCache[0] is the topic, $moveCache[1] is the board to move to.
						$moveCache[1][$row['id_topic']] = (int) (isset($this->_req->post->move_tos[$row['id_topic']]) ? $this->_req->post->move_tos[$row['id_topic']] : $this->_req->post->move_to);

						if (!empty($moveCache[1][$row['id_topic']]))
						{
							$moveCache[0][] = $row['id_topic'];
						}
						break;
					case 'remove':
						$removeCache[] = $row['id_topic'];]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/ModerationCenter.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Call the right function.
		$action = new Action();
		$subAction = $action->initialize($subActions, 'log');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></search>
			<add><![CDATA[		);

		// Call the right function.
		$action = new Action('moderation_center');
		$subAction = $action->initialize($subActions, 'log');
		$context['sub_action'] = $subAction;
		$action->dispatch($subAction);]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Post.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				});'
			);

			return $this->action_post();
		}
]]></search>
			<add><![CDATA[				});'
			);

			$_REQUEST['preview'] = false;
			return $this->action_post();
		}
]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/PostModeration.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Pick something valid...
		$action = new Action();
		$subAction = $action->initialize($subActions, 'replies');
		$action->dispatch($subAction);
	}]]></search>
			<add><![CDATA[		);

		// Pick something valid...
		$action = new Action('post_moderation');
		$subAction = $action->initialize($subActions, 'replies');
		$action->dispatch($subAction);
	}]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/ProfileHistory.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['whois_servers'] = array(
				'afrinic' => array(
					'name' => $txt['whois_afrinic'],
					'url' => 'http://www.afrinic.net/cgi-bin/whois?searchtext=' . $context['ip'],
				),
				'apnic' => array(
					'name' => $txt['whois_apnic'],]]></search>
			<add><![CDATA[			$context['whois_servers'] = array(
				'afrinic' => array(
					'name' => $txt['whois_afrinic'],
					'url' => 'http://www.afrinic.net/whois?searchtext=' . $context['ip'],
				),
				'apnic' => array(
					'name' => $txt['whois_apnic'],]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/ProfileOptions.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Set a subaction
		$action = new Action();
		$subAction = $action->initialize($subActions, 'buddies');

		// Create the tabs for the template.]]></search>
			<add><![CDATA[		);

		// Set a subaction
		$action = new Action('buddy_actions');
		$subAction = $action->initialize($subActions, 'buddies');

		// Create the tabs for the template.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			{
				// Now find out the id_member for the members in question.
				require_once(SUBSDIR . '/ProfileOptions.subs.php');
				$ignoreArray = getBuddiesID($new_entries, false);

				// Now update the current users buddy list.
				$user_profile[$this->_memID]['pm_ignore_list'] = implode(',', $ignoreArray);]]></search>
			<add><![CDATA[			{
				// Now find out the id_member for the members in question.
				require_once(SUBSDIR . '/ProfileOptions.subs.php');
				$ignoreArray = array_merge($ignoreArray, getBuddiesID($new_entries, false));

				// Now update the current users buddy list.
				$user_profile[$this->_memID]['pm_ignore_list'] = implode(',', $ignoreArray);]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Register.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Setup the action handler
		$action = new Action();
		$subAction = $action->initialize($subActions, 'register');

		// Call the action]]></search>
			<add><![CDATA[		);

		// Setup the action handler
		$action = new Action('register');
		$subAction = $action->initialize($subActions, 'register');

		// Call the action]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$regOptions['ip2'] = $req->ban_ip();
		$memberID = registerMember($regOptions, 'register');

		$lang = !empty($modSettings['userLanguage']) ? $modSettings['userLanguage'] : 'english';
		$agreement = new Agreement($lang);
		$agreement->accept($memberID, $user_info['ip'], empty($modSettings['agreementRevision']) ? strftime('%Y-%m-%d', forum_time(false)) : $modSettings['agreementRevision']);

		if (!empty($modSettings['requirePrivacypolicy']))
		{
			$policy = new \PrivacyPolicy($lang);
			$policy->accept($memberID, $user_info['ip'], empty($modSettings['privacypolicyRevision']) ? strftime('%Y-%m-%d', forum_time(false)) : $modSettings['privacypolicyRevision']);
		}

		// If there are "important" errors and you are not an admin: log the first error
		// Otherwise grab all of them and don't log anything
		if ($reg_errors->hasErrors(1) && !$user_info['is_admin'])]]></search>
			<add><![CDATA[		$regOptions['ip2'] = $req->ban_ip();
		$memberID = registerMember($regOptions, 'register');

		// If there are "important" errors and you are not an admin: log the first error
		// Otherwise grab all of them and don't log anything
		if ($reg_errors->hasErrors(1) && !$user_info['is_admin'])]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			return false;
		}

		// Do our spam protection now.
		spamProtection('register');
]]></search>
			<add><![CDATA[			return false;
		}

		$lang = !empty($modSettings['userLanguage']) ? $modSettings['userLanguage'] : 'english';
		$agreement = new Agreement($lang);
		$agreement->accept($memberID, $user_info['ip'], empty($modSettings['agreementRevision']) ? strftime('%Y-%m-%d', forum_time(false)) : $modSettings['agreementRevision']);

		if (!empty($modSettings['requirePrivacypolicy']))
		{
			$policy = new \PrivacyPolicy($lang);
			$policy->accept($memberID, $user_info['ip'], empty($modSettings['privacypolicyRevision']) ? strftime('%Y-%m-%d', forum_time(false)) : $modSettings['privacypolicyRevision']);
		}

		// Do our spam protection now.
		spamProtection('register');
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			require_once(SUBSDIR . '/Graphics.subs.php');

			if (in_array('gd', get_loaded_extensions()) && !showCodeImage($code))
				header('HTTP/1.1 400 Bad Request');
			// Otherwise just show a pre-defined letter.
			elseif (isset($this->_req->query->letter))
			{
				$this->_req->query->letter = (int) $this->_req->query->letter;
				if ($this->_req->query->letter > 0 && $this->_req->query->letter <= strlen($code) && !showLetterImage(strtolower($code{$this->_req->query->letter - 1})))
				{
					dieGif();
				}
			}
			// You must be up to no good.
			else
			{
				dieGif();
			}
		}
		// Or direct link to the sound
		elseif ($this->_req->query->format === '.wav')]]></search>
			<add><![CDATA[		{
			require_once(SUBSDIR . '/Graphics.subs.php');

			if (!showCodeImage($code))
				header('HTTP/1.1 400 Bad Request');
		}
		// Or direct link to the sound
		elseif ($this->_req->query->format === '.wav')]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/SplitTopics.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 * Original module by Mach8 - We'll never forget you.
 */]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 * Original module by Mach8 - We'll never forget you.
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// To the right sub action or index if an invalid choice was submitted
		$action = new Action();
		$subAction = $action->initialize($subActions, 'index');
		$action->dispatch($subAction);
	}]]></search>
			<add><![CDATA[		);

		// To the right sub action or index if an invalid choice was submitted
		$action = new Action('split_topics');
		$subAction = $action->initialize($subActions, 'index');
		$action->dispatch($subAction);
	}]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/XmlPreview.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 */

/**]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Valid action?
		$action = new Action();
		$subAction = $action->initialize($subActions, 'invalid', 'item');

		if ($subAction === 'invalid')]]></search>
			<add><![CDATA[		);

		// Valid action?
		$action = new Action('xml_preview');
		$subAction = $action->initialize($subActions, 'invalid', 'item');

		if ($subAction === 'invalid')]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/database/Db-abstract.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (empty($log_message))
			$log_message = $error_message;

		foreach (debug_backtrace() as $step)
		{
			// Found it?
			if (!method_exists($this, $step['function']) && !in_array(substr($step['function'], 0, 7), array('elk_db_', 'preg_re', 'db_erro', 'call_us')))]]></search>
			<add><![CDATA[		if (empty($log_message))
			$log_message = $error_message;

		foreach (debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS) as $step)
		{
			// Found it?
			if (!method_exists($this, $step['function']) && !in_array(substr($step['function'], 0, 7), array('elk_db_', 'preg_re', 'db_erro', 'call_us')))]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/database/Db-mysql.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2004-2011, GreyWyvern - All rights reserved.
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.2
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2004-2011, GreyWyvern - All rights reserved.
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// This makes it possible to automatically change the sql_mode and autocommit if needed.
		if (isset($mysql_set_mode) && $mysql_set_mode === true)
			self::$_db->query('', 'SET sql_mode = \'\', AUTOCOMMIT = 1',
			array(),
			false
		);

		// Few databases still have not set UTF-8 as their default input charset
		self::$_db->query('', ']]></search>
			<add><![CDATA[
		// This makes it possible to automatically change the sql_mode and autocommit if needed.
		if (isset($mysql_set_mode) && $mysql_set_mode === true)
		{
			self::$_db->query('', 'SET sql_mode = \'\', AUTOCOMMIT = 1',
				array(),
				false
			);
		}

		// Few databases still have not set UTF-8 as their default input charset
		self::$_db->query('', ']]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			)
		);

		return $connection;
	}
]]></search>
			<add><![CDATA[			)
		);

		// Unfortunately Elk still have some trouble dealing with the most recent settings of MySQL/Mariadb
		// disable ONLY_FULL_GROUP_BY
		self::$_db->query('', '
			SET sql_mode=(SELECT REPLACE(@@sql_mode, {string:disable}, {string:empty}))',
			array(
				'disable' => 'ONLY_FULL_GROUP_BY',
				'empty' => ''
			)
		);

		return $connection;
	}
]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/modules/Calendar/CalendarPostModule.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		try
		{
			$save_data = $event->validate($_POST);
		}
		catch (Exception $e)
		{]]></search>
			<add><![CDATA[		try
		{
			$save_data = $event->validate($_POST);
			$save_data['id_board'] = $board;
			$save_data['id_topic'] = $topic;
		}
		catch (Exception $e)
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// Make sure they can link an event to this post.
			canLinkEvent();

			$save_data['id_board'] = $board;
			$save_data['id_topic'] = $topic;

			// Insert the event.
			$event->insert($save_data, $user_info['id']);
		}]]></search>
			<add><![CDATA[			// Make sure they can link an event to this post.
			canLinkEvent();

			// Insert the event.
			$event->insert($save_data, $user_info['id']);
		}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Admin.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 * This file contains functions that are specifically done by administrators.
 *]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 * This file contains functions that are specifically done by administrators.
 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}
		else
		{
			$iter = new IteratorIterator(new DirectoryIterator($dirname));
		}

		foreach ($iter as $dir)]]></search>
			<add><![CDATA[		}
		else
		{
			$iter = new IteratorIterator(new FilesystemIterator($dirname));
		}

		foreach ($iter as $dir)]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Attachments.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$ignore_temp = true;

		// If new files are being added. We can't ignore those
		foreach ($_FILES['attachment']['tmp_name'] as $dummy)
		{
			if (!empty($dummy))
			{
				$ignore_temp = false;
				break;
			}
		}
]]></search>
			<add><![CDATA[		$ignore_temp = true;

		// If new files are being added. We can't ignore those
		if (!empty($_FILES['attachment']['tmp_name']))
		{
			foreach ($_FILES['attachment']['tmp_name'] as $dummy)
			{
				if (!empty($dummy))
				{
					$ignore_temp = false;
					break;
				}
			}
		}
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/BBC/Codes.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			array(
				self::ATTR_TAG => 'url',
				self::ATTR_TYPE => self::TYPE_UNPARSED_CONTENT,
				self::ATTR_CONTENT => '<a href="$1" class="bbc_link" target="_blank">$1</a>',
				self::ATTR_VALIDATE => function (&$tag, &$data) {
					$data = addProtocol($data);
				},]]></search>
			<add><![CDATA[			array(
				self::ATTR_TAG => 'url',
				self::ATTR_TYPE => self::TYPE_UNPARSED_CONTENT,
				self::ATTR_CONTENT => '<a href="$1" class="bbc_link" target="_blank" rel="noopener noreferrer">$1</a>',
				self::ATTR_VALIDATE => function (&$tag, &$data) {
					$data = addProtocol($data);
				},]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			array(
				self::ATTR_TAG => 'url',
				self::ATTR_TYPE => self::TYPE_UNPARSED_EQUALS,
				self::ATTR_BEFORE => '<a href="$1" class="bbc_link" target="_blank">',
				self::ATTR_AFTER => '</a>',
				self::ATTR_VALIDATE => function (&$tag, &$data) {
					$data = addProtocol($data);]]></search>
			<add><![CDATA[			array(
				self::ATTR_TAG => 'url',
				self::ATTR_TYPE => self::TYPE_UNPARSED_EQUALS,
				self::ATTR_BEFORE => '<a href="$1" class="bbc_link" target="_blank" rel="noopener noreferrer">',
				self::ATTR_AFTER => '</a>',
				self::ATTR_VALIDATE => function (&$tag, &$data) {
					$data = addProtocol($data);]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/BoardsList.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			if ($row_board['subject'] != '')
			{
				$this_last_post['href'] = $this->_scripturl . '?topic=' . $row_board['id_topic'] . '.msg' . ($this->_user['is_guest'] ? $row_board['id_msg'] : $row_board['new_from']) . (empty($row_board['is_read']) ? ';boardseen' : '') . '#new';
				$this_last_post['link'] = '<a href="' . $this_last_post['href'] . '" title="' . $row_board['subject'] . '">' . $row_board['short_subject'] . '</a>';
				/* The board's and children's 'last_post's have:
				time, timestamp (a number that represents the time.), id (of the post), topic (topic id.),
				link, href, subject, start (where they should go for the first unread post.),]]></search>
			<add><![CDATA[			if ($row_board['subject'] != '')
			{
				$this_last_post['href'] = $this->_scripturl . '?topic=' . $row_board['id_topic'] . '.msg' . ($this->_user['is_guest'] ? $row_board['id_msg'] : $row_board['new_from']) . (empty($row_board['is_read']) ? ';boardseen' : '') . '#new';
				$this_last_post['link'] = '<a href="' . $this_last_post['href'] . '" title="' . Util::htmlspecialchars($row_board['subject']). '">' . $row_board['short_subject'] . '</a>';
				/* The board's and children's 'last_post's have:
				time, timestamp (a number that represents the time.), id (of the post), topic (topic id.),
				link, href, subject, start (where they should go for the first unread post.),]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/CalendarEvent.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (!allowedTo('post_new') && empty($this->_settings['disableNoPostingCalendarEdits']))
			$eventProperties = getEventProperties($this->_event_id, true);

		if (empty($this->_settings['cal_allowspan']))
			$span = 0;
		elseif (empty($options['span']) || $options['span'] == 1)]]></search>
			<add><![CDATA[		if (!allowedTo('post_new') && empty($this->_settings['disableNoPostingCalendarEdits']))
			$eventProperties = getEventProperties($this->_event_id, true);

		$id_board = isset($eventProperties['id_board']) ? $eventProperties['id_board'] : (isset($options['id_board']) ? $options['board'] : 0);
		$id_topic = isset($eventProperties['id_topic']) ? $eventProperties['id_topic'] : (isset($options['id_topic']) ? $options['topic'] : 0);

		if (empty($this->_settings['cal_allowspan']))
			$span = 0;
		elseif (empty($options['span']) || $options['span'] == 1)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'title' => Util::substr($options['evtitle'], 0, 100),
			'span' => $span,
			'start_date' => strftime('%Y-%m-%d', mktime(0, 0, 0, (int) $options['month'], (int) $options['day'], (int) $options['year'])),
			'id_board' => isset($eventProperties['id_board']) ? (int) $eventProperties['id_board'] : 0,
			'id_topic' => isset($eventProperties['id_topic']) ? (int) $eventProperties['id_topic'] : 0,
		);

		modifyEvent($this->_event_id, $eventOptions);]]></search>
			<add><![CDATA[			'title' => Util::substr($options['evtitle'], 0, 100),
			'span' => $span,
			'start_date' => strftime('%Y-%m-%d', mktime(0, 0, 0, (int) $options['month'], (int) $options['day'], (int) $options['year'])),
			'id_board' => (int) $id_board,
			'id_topic' => (int) $id_topic,
		);

		modifyEvent($this->_event_id, $eventOptions);]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Graphics.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[{
	global $gd2, $settings, $user_info, $modSettings;

	// What type are we going to be doing?
	// Note: The higher the value of visual_verification_type the harder the verification is
	// from 0 as disabled through to 4 as "Very hard".]]></search>
			<add><![CDATA[{
	global $gd2, $settings, $user_info, $modSettings;

	if (!checkGD())
		return false;

	// What type are we going to be doing?
	// Note: The higher the value of visual_verification_type the harder the verification is
	// from 0 as disabled through to 4 as "Very hard".]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Html2Md.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Clean up any excess spacing etc
		$this->_clean_markdown();

		// Wordwrap?
		if (!empty($this->body_width))
		{]]></search>
			<add><![CDATA[		// Clean up any excess spacing etc
		$this->_clean_markdown();

		// Convert any clear text links to MD
		$this->_convert_plaintxt_links();

		// Wordwrap?
		if (!empty($this->body_width))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}
	}

	/**
	 * Breaks a string up so its no more than width characters long
	 *]]></search>
			<add><![CDATA[		}
	}

	/**
	 * Helper function to find and wrap plain text links in MD format
	 */
	private function _convert_plaintxt_links()
	{
		$this->markdown = preg_replace_callback('/[^\(\/\]]((https?):\/\/|www\.)[-\p{L}0-9+&@#\/%?=~_|!:,.;]*[\p{L}0-9+&@#\/%=~_|]/iu', array($this, '_plaintxt_callback'), $this->markdown);
	}

	/**
	 * Callback function used by _convert_plaintxt_links for plain link to MD
	 *
	 * @param string[] $matches
	 * @return string
	 */
	private function _plaintxt_callback($matches)
	{
		global $txt;

		$replacement = $this->line_end . '[' . $txt['link'] . '](' . trim($matches[0]) . ')';
		$this->_check_link_lenght($replacement);

		return $replacement;
	}

	/**
	 * Breaks a string up so its no more than width characters long
	 *]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Members.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					'OPENID' => !empty($regOptions['openid']) ? $regOptions['openid'] : '',
				);
				$emaildata = loadEmailTemplate('register_' . ($regOptions['auth_method'] == 'openid' ? 'openid_' : '') . 'immediate', $replacements);
				sendmail($regOptions['email'], $emaildata['subject'], $emaildata['body'], null, null, false, 0);
			}
]]></search>
			<add><![CDATA[					'OPENID' => !empty($regOptions['openid']) ? $regOptions['openid'] : '',
				);
				$emaildata = loadEmailTemplate('register_' . ($regOptions['auth_method'] == 'openid' ? 'openid_' : '') . 'immediate', $replacements);
				$mark_down = new Html_2_Md(str_replace("\n", '<br>', $emaildata['body']));
				$emaildata['body'] = $mark_down->get_markdown();

				sendmail($regOptions['email'], $emaildata['subject'], $emaildata['body'], null, null, false, 0);
			}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{

			$emaildata = loadEmailTemplate('register_' . ($regOptions['auth_method'] == 'openid' ? 'openid_' : '') . ($regOptions['require'] == 'activation' ? 'activate' : 'coppa'), $replacements);

			sendmail($regOptions['email'], $emaildata['subject'], $emaildata['body'], null, null, false, 0);
		}]]></search>
			<add><![CDATA[		{

			$emaildata = loadEmailTemplate('register_' . ($regOptions['auth_method'] == 'openid' ? 'openid_' : '') . ($regOptions['require'] == 'activation' ? 'activate' : 'coppa'), $replacements);
			$mark_down = new Html_2_Md(str_replace("\n", '<br>', $emaildata['body']));
			$emaildata['body'] = $mark_down->get_markdown();

			sendmail($regOptions['email'], $emaildata['subject'], $emaildata['body'], null, null, false, 0);
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			);

			$emaildata = loadEmailTemplate('register_' . ($regOptions['auth_method'] == 'openid' ? 'openid_' : '') . 'pending', $replacements);

			sendmail($regOptions['email'], $emaildata['subject'], $emaildata['body'], null, null, false, 0);
]]></search>
			<add><![CDATA[			);

			$emaildata = loadEmailTemplate('register_' . ($regOptions['auth_method'] == 'openid' ? 'openid_' : '') . 'pending', $replacements);
			$mark_down = new Html_2_Md(str_replace("\n", '<br>', $emaildata['body']));
			$emaildata['body'] = $mark_down->get_markdown();

			sendmail($regOptions['email'], $emaildata['subject'], $emaildata['body'], null, null, false, 0);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				}
			}
			elseif ($query == 'member_names')
				$query_parts[$condition === 'or' ? 'or' : 'and'][] = $allowed_conditions[$query]($query_params);
			else
				$query_parts['and'][] = isset($allowed_conditions[$query]) ? $allowed_conditions[$query] : $query;
		}]]></search>
			<add><![CDATA[				}
			}
			elseif ($query == 'member_names')
				$query_parts['and'][] = $allowed_conditions[$query]($query_params);
			else
				$query_parts['and'][] = isset($allowed_conditions[$query]) ? $allowed_conditions[$query] : $query;
		}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/PaidSubscriptions.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$cost = '???';

		// Do the span.
		preg_match('~(\d*)(\w)~', $row['length'], $match);
		if (isset($match[2]))
		{
			$num_length = $match[1];
			$length = $match[1] . ' ';]]></search>
			<add><![CDATA[			$cost = '???';

		// Do the span.
		$length = '??';
		$num_length = 0;
		if (preg_match('~^(\d*)([DWFMY]$)~', $row['length'], $match) === 1)
		{
			$num_length = $match[1];
			$length = $match[1] . ' ';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$length .= $txt['paid_mod_span_years'];
					$num_length *= 31556926;
					break;
			}
		}
		else
			$length = '??';

		$context['subscriptions'][$row['id_subscribe']] = array(
			'id' => $row['id_subscribe'],]]></search>
			<add><![CDATA[					$length .= $txt['paid_mod_span_years'];
					$num_length *= 31556926;
					break;
				default:
					$length = '??';
			}
		}

		$context['subscriptions'][$row['id_subscribe']] = array(
			'id' => $row['id_subscribe'],]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Permissions.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 */
class Permissions
{]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 */
class Permissions
{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	);

	/**
	 * Load a few illegal permissions into context.
	 *
	 * Calls hook: integrate_load_illegal_permissions
	 */
	public function __construct()
	{]]></search>
			<add><![CDATA[	);

	/**
	 * Load a few illegal permissions into the class and context.
	 *
	 * - Calls hook: integrate_load_illegal_permissions
	 * - Calls hook: integrate_load_illegal_guest_permissions
	 */
	public function __construct()
	{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	/**
	 * @return string[]
	 */
	public function getIllegalPermissions()]]></search>
			<add><![CDATA[	}

	/**
	 * Return the list of illegal permissions
	 *
	 * @return string[]
	 */
	public function getIllegalPermissions()]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	/**
	 * @return array
	 */
	public function getIllegalGuestPermissions()
	{]]></search>
			<add><![CDATA[	}

	/**
	 * Return the list of illegal guest permissions
	 *
	 * @return string[]
	 */
	public function getIllegalGuestPermissions()
	{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	/**
	 * @return array
	 */
	public function loadIllegal()
	{
		global $context;

		$illegal_permissions = array();
		foreach ($this->reserved_permissions as $illegal_permission)
		{
			if (!allowedTo($illegal_permission))
			{
				$illegal_permissions[] = $illegal_permission;
			}
		}
		$context['illegal_permissions'] = $illegal_permissions;
		call_integration_hook('integrate_load_illegal_permissions');

		$this->illegal_permissions = $illegal_permissions;
	}

	/**
	 * Loads those permissions guests cannot have, into context.
	 *
	 * @return array
	 */
	public function loadIllegalGuest()
	{
		global $context;

		$context['non_guest_permissions'] = $this->illegal_guest_permissions;
		call_integration_hook('integrate_load_illegal_guest_permissions');

		return $this->illegal_guest_permissions;
	}

	/**]]></search>
			<add><![CDATA[	}

	/**
	 * Loads those reserved permissions into context.
	 */
	public function loadIllegal()
	{
		global $context;

		foreach ($this->reserved_permissions as $illegal_permission)
		{
			if (!allowedTo($illegal_permission))
			{
				$this->illegal_permissions[] = $illegal_permission;
			}
		}

		$context['illegal_permissions'] = &$this->illegal_permissions;
		call_integration_hook('integrate_load_illegal_permissions', array(&$this->illegal_permissions));
	}

	/**
	 * Loads those permissions guests cannot have, into context.
	 */
	public function loadIllegalGuest()
	{
		global $context;

		$context['non_guest_permissions'] = &$this->illegal_guest_permissions;
		call_integration_hook('integrate_load_illegal_guest_permissions', array(&$this->illegal_guest_permissions));
	}

	/**]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Post.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$topicOptions['is_approved'] = true;
	elseif (!empty($topicOptions['id']) && !isset($topicOptions['is_approved']))
	{
		$is_approved = topicAttribute($topicOptions['id'], array('approved'));
		$topicOptions['is_approved'] = $is_approved['approved'];
	}]]></search>
			<add><![CDATA[		$topicOptions['is_approved'] = true;
	elseif (!empty($topicOptions['id']) && !isset($topicOptions['is_approved']))
	{
		require_once(SUBSDIR . '/Topic.subs.php');
		$is_approved = topicAttribute($topicOptions['id'], array('approved'));
		$topicOptions['is_approved'] = $is_approved['approved'];
	}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Recent.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				SELECT 
					m.id_msg
				FROM {db_prefix}messages AS m
					INNER JOIN {db_prefix}boards AS b ON (b.id_board = m.id_board)
				WHERE ' . $this->_query_this_board . '
					AND m.approved = {int:is_approved}
				ORDER BY m.id_msg DESC
				LIMIT {int:offset}, {int:limit}',
				array_merge($this->_query_parameters, array(]]></search>
			<add><![CDATA[				SELECT 
					m.id_msg
				FROM {db_prefix}messages AS m
					JOIN {db_prefix}boards AS b ON (b.id_board = m.id_board)
					JOIN {db_prefix}topics AS t ON (t.id_topic = m.id_topic)
				WHERE ' . $this->_query_this_board . '
					AND m.approved = {int:is_approved}
					AND t.approved = {int:is_approved}
				ORDER BY m.id_msg DESC
				LIMIT {int:offset}, {int:limit}',
				array_merge($this->_query_parameters, array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		list ($this->_posts, $this->_board_ids) = prepareRecentPosts($returns, $start);
	}
}]]></search>
			<add><![CDATA[
		list ($this->_posts, $this->_board_ids) = prepareRecentPosts($returns, $start);
	}
}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Search/API/Sphinxql.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// Grouping by topic id makes it return only one result per topic, so don't set that for in-topic searches
			if (empty($search_params['topic']))
			{
				// In the topic, base weights is the best ORDER BY param as relevance/rank is topic level
				$query .= ' GROUP BY id_topic WITHIN GROUP ORDER BY ' . str_replace('rank ', 'weights ', $sphinx_sort);
			}

			$query .= ' ORDER BY ' . $sphinx_sort;
			$query .= ' LIMIT 0,' . (int) $modSettings['sphinx_max_results'];

			// Set any options needed, like field weights
			$query .= ' OPTION field_weights=(subject=' . (!empty($modSettings['search_weight_subject']) ? $modSettings['search_weight_subject'] * 10 : 100) . ',body=100),
			ranker=proximity_bm25,
			idf=plain,]]></search>
			<add><![CDATA[			// Grouping by topic id makes it return only one result per topic, so don't set that for in-topic searches
			if (empty($search_params['topic']))
			{
				// In the topic group, date based seems the most "normal" ORDER BY param for display purposes
				$query .= ' GROUP BY id_topic WITHIN GROUP ORDER BY poster_time ASC';
			}

			$query .= ' ORDER BY ' . $sphinx_sort;
			$query .= ' LIMIT 0,' . (int) $modSettings['sphinx_max_results'];

			// Set any options needed, like field weights
			// A better ranker expression is one based off the standard Sphinx SPH04 algo but boosted for
			// exact_hit and use of proper BM25F instead of the short form BM25.  Use the following for best results
			// ranker=expr(\'sum((4 * lcs + 2 * (min_hit_pos == 1) + 4 * exact_hit) * user_weight) * 1000 + bm25f(2.0, 0.75, {subject = 4, body = 1})\'),
			// For proper use of bm25f add "index_field_lengths = 1" to your sphinx.conf and rebuild the index
			$query .= ' OPTION field_weights=(subject=' . (!empty($modSettings['search_weight_subject']) ? $modSettings['search_weight_subject'] * 10 : 100) . ',body=100),
			ranker=proximity_bm25,
			idf=plain,]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Search/Search.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.3
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			$request = $this->_db->query('', '
				SELECT ' . (empty($this->_search_params['maxage']) ? '0, ' : 'COALESCE(MIN(id_msg), -1), ') . (empty($this->_search_params['minage']) ? '0' : 'COALESCE(MAX(id_msg), -1)') . '
				FROM {db_prefix}messages
				WHERE 1=1' . ($modSettings['postmod_active'] ? '
					AND approved = {int:is_approved_true}' : '') . (empty($this->_search_params['minage']) ? '' : '
					AND poster_time <= {int:timestamp_minimum_age}') . (empty($this->_search_params['maxage']) ? '' : '
					AND poster_time >= {int:timestamp_maximum_age}'),
				array(
					'timestamp_minimum_age' => empty($this->_search_params['minage']) ? 0 : time() - 86400 * $this->_search_params['minage'],
					'timestamp_maximum_age' => empty($this->_search_params['maxage']) ? 0 : time() - 86400 * $this->_search_params['maxage'],]]></search>
			<add><![CDATA[		{
			$request = $this->_db->query('', '
				SELECT ' . (empty($this->_search_params['maxage']) ? '0, ' : 'COALESCE(MIN(id_msg), -1), ') . (empty($this->_search_params['minage']) ? '0' : 'COALESCE(MAX(id_msg), -1)') . '
				FROM {db_prefix}messages AS m' . ($modSettings['postmod_active'] ? '
					JOIN {db_prefix}topics AS t ON (t.id_topic = m.id_topic)' : '') . '
				WHERE 1=1' . ($modSettings['postmod_active'] ? '
					AND m.approved = {int:is_approved_true}
					AND t.approved = {int:is_approved_true}' : '') . (empty($this->_search_params['minage']) ? '' : '
					AND m.poster_time <= {int:timestamp_minimum_age}') . (empty($this->_search_params['maxage']) ? '' : '
					AND m.poster_time >= {int:timestamp_maximum_age}'),
				array(
					'timestamp_minimum_age' => empty($this->_search_params['minage']) ? 0 : time() - 86400 * $this->_search_params['minage'],
					'timestamp_maximum_age' => empty($this->_search_params['maxage']) ? 0 : time() - 86400 * $this->_search_params['maxage'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				LEFT JOIN {db_prefix}members AS first_mem ON (first_mem.id_member = first_m.id_member)
				LEFT JOIN {db_prefix}members AS last_mem ON (last_mem.id_member = first_m.id_member)
			WHERE m.id_msg IN ({array_int:message_list})' . ($modSettings['postmod_active'] ? '
				AND m.approved = {int:is_approved}' : '') . '
			ORDER BY FIND_IN_SET(m.id_msg, {string:message_list_in_set})
			LIMIT {int:limit}',
			array(]]></search>
			<add><![CDATA[				LEFT JOIN {db_prefix}members AS first_mem ON (first_mem.id_member = first_m.id_member)
				LEFT JOIN {db_prefix}members AS last_mem ON (last_mem.id_member = first_m.id_member)
			WHERE m.id_msg IN ({array_int:message_list})' . ($modSettings['postmod_active'] ? '
				AND m.approved = {int:is_approved}
				AND t.approved = {int:is_approved}' : '') . '
			ORDER BY FIND_IN_SET(m.id_msg, {string:message_list_in_set})
			LIMIT {int:limit}',
			array(]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/SettingsFormAdapter/File.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					if (in_array($varname, $safe_strings))
					{
						$new_setting['mask'] = 'nohtml';
					}
					$modSettings[$configVar[0]] = $value;
				}]]></search>
			<add><![CDATA[					if (in_array($varname, $safe_strings))
					{
						$new_setting['mask'] = 'nohtml';
						$value = strtr($value, array(\Util::htmlspecialchars('<br />') => "\n"));
					}
					$modSettings[$configVar[0]] = $value;
				}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			{
				if (in_array($configVar, $safe_strings))
				{
					$this->new_settings[$configVar] = '\'' . addcslashes(\Util::htmlspecialchars($this->configValues[$configVar], ENT_QUOTES), '\'\\') . '\'';
				}
				else
				{]]></search>
			<add><![CDATA[			{
				if (in_array($configVar, $safe_strings))
				{
					$this->new_settings[$configVar] = '\'' . addcslashes(\Util::htmlspecialchars(strtr($this->configValues[$configVar], array("\n" => '<br />', "\r" => '')), ENT_QUOTES), '\'\\') . '\'';
				}
				else
				{]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/VerificationControls.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[function loadVerificationControls()
{
	$known_verifications = array(
		'captcha',
		'questions',
		'emptyfield'
	);

	// Let integration add some more controls
	call_integration_hook('integrate_control_verification', array(&$known_verifications));
]]></search>
			<add><![CDATA[function loadVerificationControls()
{
	$known_verifications = array(
		'questions',
		'emptyfield'
	);

	// Need GD for CAPTCHA images
	if (!in_array('gd', get_loaded_extensions()))
	{
		array_unshift($known_verifications,'captcha');
	}

	// Let integration add some more controls
	call_integration_hook('integrate_control_verification', array(&$known_verifications));
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	private $_tested = false;

	/**
	 * If the GD library is available for use
	 *
	 * @var boolean
	 */
	private $_use_graphic_library = false;

	/**
	 * array of allowable characters that can be used in the image
	 *]]></search>
			<add><![CDATA[	 */
	private $_tested = false;

	/**
	 * array of allowable characters that can be used in the image
	 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $modSettings;

		$this->_use_graphic_library = in_array('gd', get_loaded_extensions());
		$this->_num_chars = $modSettings['visual_verification_num_chars'];

		// Skip I, J, L, O, Q, S and Z.]]></search>
			<add><![CDATA[	{
		global $modSettings;

		$this->_num_chars = $modSettings['visual_verification_num_chars'];

		// Skip I, J, L, O, Q, S and Z.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'values' => array(
				'image_href' => $this->_image_href,
				'text_value' => $this->_text_value,
				'use_graphic_library' => $this->_use_graphic_library,
				'chars_number' => $this->_num_chars,
				'is_error' => $this->_tested && !$this->_verifyCode(),
			)]]></search>
			<add><![CDATA[			'values' => array(
				'image_href' => $this->_image_href,
				'text_value' => $this->_text_value,
				'chars_number' => $this->_num_chars,
				'is_error' => $this->_tested && !$this->_verifyCode(),
			)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$config_vars = array(
			array('title', 'configure_verification_means'),
			array('desc', 'configure_verification_means_desc'),
			array('int', 'visual_verification_num_chars'),
			'vv' => array('select', 'visual_verification_type',
				array($txt['setting_image_verification_off'], $txt['setting_image_verification_vsimple'], $txt['setting_image_verification_simple'], $txt['setting_image_verification_medium'], $txt['setting_image_verification_high'], $txt['setting_image_verification_extreme']),]]></search>
			<add><![CDATA[		$config_vars = array(
			array('title', 'configure_verification_means'),
			array('desc', 'configure_verification_means_desc'),
			array('title', 'configure_captcha'),
			array('int', 'visual_verification_num_chars'),
			'vv' => array('select', 'visual_verification_type',
				array($txt['setting_image_verification_off'], $txt['setting_image_verification_vsimple'], $txt['setting_image_verification_simple'], $txt['setting_image_verification_medium'], $txt['setting_image_verification_high'], $txt['setting_image_verification_extreme']),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$_SESSION['visual_verification_code'] .= $this->_standard_captcha_range[array_rand($this->_standard_captcha_range)];

		// Some javascript for CAPTCHA.
		if ($this->_use_graphic_library)
		{
			loadJavascriptFile('jquery.captcha.js');
			addInlineJavascript('
		$(\'#visual_verification_type\').Elk_Captcha({
			\'imageURL\': ' . JavaScriptEscape($verification_image) . ',
			\'useLibrary\': true,]]></search>
			<add><![CDATA[			$_SESSION['visual_verification_code'] .= $this->_standard_captcha_range[array_rand($this->_standard_captcha_range)];

		// Some javascript for CAPTCHA.
		loadJavascriptFile('jquery.captcha.js');
		addInlineJavascript('
		$(\'#visual_verification_type\').Elk_Captcha({
			\'imageURL\': ' . JavaScriptEscape($verification_image) . ',
			\'useLibrary\': true,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			\'refreshevent\': \'change\',
			\'admin\': true
		});', true);
		}

		// Show the image itself, or text saying we can't.
		if ($this->_use_graphic_library)
			$config_vars['vv']['postinput'] = '<br /><img src="' . $verification_image . ';type=' . (empty($modSettings['visual_verification_type']) ? 0 : $modSettings['visual_verification_type']) . '" alt="' . $txt['setting_image_verification_sample'] . '" id="verification_image" /><br />';
		else
			$config_vars['vv']['postinput'] = '<br /><span class="smalltext">' . $txt['setting_image_verification_nogd'] . '</span>';

		return $config_vars;
	}]]></search>
			<add><![CDATA[			\'refreshevent\': \'change\',
			\'admin\': true
		});', true);

		// Show the image itself, or text saying we can't.
		$config_vars['vv']['postinput'] = '<br /><img src="' . $verification_image . ';type=' . (empty($modSettings['visual_verification_type']) ? 0 : $modSettings['visual_verification_type']) . '" alt="' . $txt['setting_image_verification_sample'] . '" id="verification_image" /><br />';

		return $config_vars;
	}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/XmlArray.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					return $array[$el];
				else
				{
					$trace = debug_backtrace();
					$i = 0;
					while ($i < count($trace) && isset($trace[$i]['class']) && $trace[$i]['class'] == get_class($this))
						$i++;]]></search>
			<add><![CDATA[					return $array[$el];
				else
				{
					$trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
					$i = 0;
					while ($i < count($trace) && isset($trace[$i]['class']) && $trace[$i]['class'] == get_class($this))
						$i++;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// No results found...
		if (empty($results))
		{
			$trace = debug_backtrace();
			$i = 0;
			while ($i < count($trace) && isset($trace[$i]['class']) && $trace[$i]['class'] == get_class($this))
				$i++;]]></search>
			<add><![CDATA[		// No results found...
		if (empty($results))
		{
			$trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
			$i = 0;
			while ($i < count($trace) && isset($trace[$i]['class']) && $trace[$i]['class'] == get_class($this))
				$i++;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		else
			return $results + array('name' => $path . '[]');
	}
}]]></search>
			<add><![CDATA[		else
			return $results + array('name' => $path . '[]');
	}
}]]></add>
		</operation>
	</file>
	<file name="BOARDDIR/subscriptions.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$ssi_guest_access = true;
new Bootstrap(true);

global $txt, $modSettings, $context;

// Need lots of help
require_once(SUBSDIR . '/PaidSubscriptions.subs.php');]]></search>
			<add><![CDATA[$ssi_guest_access = true;
new Bootstrap(true);

global $txt, $modSettings, $context, $scripturl;

// Need lots of help
require_once(SUBSDIR . '/PaidSubscriptions.subs.php');]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/Display.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			if ($message['can_like'] || $message['can_unlike'])
				echo '
							<li class="listlevel1', !empty($message['like_counter']) ? ' liked"' : '"', '>
								<a class="linklevel1 ', $message['can_unlike'] ? 'unlike_button' : 'like_button', '" href="javascript:void(0)" title="', !empty($message['like_counter']) ? $txt['liked_by'] . ' ' . implode(', ', $context['likes'][$message['id']]['member']) : $txt['like_post'], '" onclick="likePosts.prototype.likeUnlikePosts(event,', $message['id'], ', ', $context['current_topic'], '); return false;">',
									!empty($message['like_counter']) ? '<span class="likes_indicator">' . $message['like_counter'] . '</span>&nbsp;' . $txt['likes'] : $txt['like_post'], '
								</a>
							</li>';]]></search>
			<add><![CDATA[			if ($message['can_like'] || $message['can_unlike'])
				echo '
							<li class="listlevel1', !empty($message['like_counter']) ? ' liked"' : '"', '>
								<a class="linklevel1 ', $message['can_unlike'] ? 'unlike_button' : 'like_button', '" href="javascript:void(0)"', !empty($message['like_counter']) ? ' title="' . $txt['liked_by'] . ' ' . implode(', ', $context['likes'][$message['id']]['member']) . '"' : '', ' onclick="likePosts.prototype.likeUnlikePosts(event,', $message['id'], ', ', $context['current_topic'], '); return false;">',
									!empty($message['like_counter']) ? '<span class="likes_indicator">' . $message['like_counter'] . '</span>&nbsp;' . $txt['likes'] : $txt['like_post'], '
								</a>
							</li>';]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/ManageSearch.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						<span class="smalltext">', $txt['sphinx_index_prefix_desc'], '</span>
					</dt>
					<dd>
						<input type="text" name="sphinx_index_prefix" id="sphinx_index_prefix_input" value="', isset($modSettings['sphinx_index_prefix']) ? $modSettings['sphinx_data_path'] : 'elkarte', '" size="65" />
					</dd>
					<dt>
						<label for="sphinx_data_path_input">', $txt['sphinx_index_data_path'], '</label><br />]]></search>
			<add><![CDATA[						<span class="smalltext">', $txt['sphinx_index_prefix_desc'], '</span>
					</dt>
					<dd>
						<input type="text" name="sphinx_index_prefix" id="sphinx_index_prefix_input" value="', isset($modSettings['sphinx_index_prefix']) ? $modSettings['sphinx_index_prefix'] : 'elkarte', '" size="65" />
					</dd>
					<dt>
						<label for="sphinx_data_path_input">', $txt['sphinx_index_data_path'], '</label><br />]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/Post.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.2
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		template_verification_controls($context['visual_verification_id'], '
						<div class="post_verification">
							<span' . (!empty($context['post_error']['need_qr_verification']) ? ' class="error"' : '') . '>
								<strong>' . $txt['verification'] . ':</strong>
							</span>
							', '
						</div>');
	}]]></search>
			<add><![CDATA[	{
		template_verification_controls($context['visual_verification_id'], '
						<div class="post_verification">
							<h2 class="category_header">
							 	<span class="' . (!empty($context['post_error']['need_qr_verification']) ? ' error"' : '"') . '>
									<strong>' . $txt['verification'] . ':</strong>
								</span>	
							</h2>
							', '
						</div>');
	}]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/Theme.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:      BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:      BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			addInlineJavascript('
			var oEmbedtext = ({
				preview_image : ' . JavaScriptEscape($txt['preview_image']) . ',
				ctp_video : ' . JavaScriptEscape($txt['ctp_video']) . ',
				hide_video : ' . JavaScriptEscape($txt['hide_video']) . ',]]></search>
			<add><![CDATA[		{
			addInlineJavascript('
			var oEmbedtext = ({
				embed_limit : ' . (!empty($modSettings['video_embed_limit']) ? $modSettings['video_embed_limit'] : 25) . ',
				preview_image : ' . JavaScriptEscape($txt['preview_image']) . ',
				ctp_video : ' . JavaScriptEscape($txt['ctp_video']) . ',
				hide_video : ' . JavaScriptEscape($txt['hide_video']) . ',]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/VerificationControls.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[{
	global $context, $txt;

	if ($verify_context['use_graphic_library'])
		echo '
				<img src="', $verify_context['image_href'], '" alt="', $txt['visual_verification_description'], '" id="verification_image_', $verify_id, '" />';
	else
		for ($i = 0; $i < $verify_context['chars_number']; $i++)
			echo '
				<img src="', $verify_context['image_href'], ';letter=', $i, '" alt="', $txt['visual_verification_description'], '" id="verification_image_', $verify_id, '_', $i, '" />';

	echo '
				<div class="smalltext">]]></search>
			<add><![CDATA[{
	global $context, $txt;

	echo '
				<img src="', $verify_context['image_href'], '" alt="', $txt['visual_verification_description'], '" id="verification_image_', $verify_id, '" />';

	echo '
				<div class="smalltext">]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$(\'.playsound, .refreshimage\').Elk_Captcha({
			\'uniqueID\': ' . JavaScriptEscape($verify_id) . ',
			\'imageURL\': ' . JavaScriptEscape($verify_context['image_href']) . ',
			\'useLibrary\': ' . ($verify_context['use_graphic_library'] ? 'true' : 'false') . ',
			\'letterCount\': ' . $verify_context['chars_number'] . '
		});', true);
}]]></search>
			<add><![CDATA[		$(\'.playsound, .refreshimage\').Elk_Captcha({
			\'uniqueID\': ' . JavaScriptEscape($verify_id) . ',
			\'imageURL\': ' . JavaScriptEscape($verify_context['image_href']) . ',
			\'useLibrary\': \'true\',
			\'letterCount\': ' . $verify_context['chars_number'] . '
		});', true);
}]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/css/_besocial/index_besocial.css">
		<operation>
			<search position="replace"><![CDATA[    border-top-color: #CCCCCC !important;
}

/* -------------------------------------------------------
 *	$MEDIA
 * -------------------------------------------------------]]></search>
			<add><![CDATA[    border-top-color: #CCCCCC !important;
}

/* -------------------------------------------------------
 *	$ICONS
 * -------------------------------------------------------
 *
 * Icons. The color file is the place for this since we
 * can't style embedded material.
 *
 * -------------------------------------------------------
 */

.iconline {
	background: #B4E391;
	background-image: linear-gradient(to bottom, #B4E391 0%,#61C419 50%,#b4E391 100%);
	border-color: #27A348;
}

.icoffline {
	background: #BBBBBB;
	background-image: linear-gradient(to bottom, #BBBBBB 0%,#6f6f6f 50%,#BBBBBB 100%);
	border-color: #828282;
}

/* -------------------------------------------------------
 *	$MEDIA
 * -------------------------------------------------------]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/css/index.css">
		<operation>
			<search position="replace"><![CDATA[	display: inline-block;
	overflow: hidden;
	max-width: 100%;
	vertical-align: top;
	text-overflow: ellipsis;
	white-space: nowrap;
	word-wrap: normal;]]></search>
			<add><![CDATA[	display: inline-block;
	overflow: hidden;
	max-width: 100%;
	vertical-align: bottom;
	text-overflow: ellipsis;
	white-space: nowrap;
	word-wrap: normal;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	#menu_nav {
		padding: 6px 0;
	}
}

/* This one does 800 screens at default font size. */]]></search>
			<add><![CDATA[	#menu_nav {
		padding: 6px 0;
	}

	.new_posts, .require_approval {
		padding: 1px 6px 2px 4px;
		font-size: .857em;
	}
}

/* This one does 800 screens at default font size. */]]></add>
		</operation>
	</file>
	<file name="LANGUAGEDIR/english/Help.english.php">
		<operation>
			<search position="replace"><![CDATA[$helptxt['badbehavior_reverse_proxy_addresses'] = 'In some server farm configurations, Bad Behavior may be unable to determine whether a remote request originated from your reverse proxy/load balancer or arrived directly. In this case you should add all of the internal IP addresses for your reverse proxy/load balancer servers as seen from the origin server. These can usually be omitted; however if you have a configuration where some requests can bypass the reverse proxy/load balancer and connect to the origin server directly, then you should use this option. You should also use this option when incoming requests pass through two or more reverse proxies before reaching the origin server.<br /><br />Enter each IP address or CIDR netblocks separated by a | (1.2.3.4|5.4.3.2/27)';
$helptxt['badbehavior_reverse_proxy_header'] = 'When a reverse proxy is in use, Bad Behavior looks at this HTTP header to determine the actual source IP address for each web request. Your reverse proxy or load balancer must add an HTTP header containing the remote IP address where the connection originated. Most do this by default; check the configuration for your reverse proxy or load balancer to ensure that this header is sent.<br /><br />If you use the CloudFlare service, you should change this option to CF-Connecting-IP.';
$helptxt['badbehavior_reverse_proxy'] = 'When enabled, Bad Behavior will assume it is receiving a connection from a reverse proxy, when a specific HTTP header is received.';
$helptxt['badbehavior_eucookie'] = 'Set this option on if you believe Bad Behavior\'s site security cookie is not exempt from the 2012 EU cookie regulation.</a>';
$helptxt['badbehavior_httpbl_maxage'] = 'This is the number of days since suspicious activity was last observed from an IP address by Project Honey Pot. Bad Behavior will block requests with a maximum age equal to or less than this setting.';
$helptxt['badbehavior_httpbl_threat'] = 'This number provides a measure of how suspicious an IP address is, based on activity observed at Project Honey Pot. Bad Behavior will block requests with a threat level equal or higher to this setting. Project Honey Pot has <a href="http://www.projecthoneypot.org/threat_info.php" target="_blank">more information on this parameter</a>.';
$helptxt['badbehavior_httpbl_key'] = 'Bad Behavior is capable of using data from the <a href="http://www.projecthoneypot.org/faq.php#g" target="_blank">http:BL</a> service provided by <a href="http://www.projecthoneypot.org/" target="_blank">Project Honey Pot</a> to screen requests.<br /><br />This is purely optional; however if you wish to use it, you must <a href="http://www.projecthoneypot.org/httpbl_configure.php" target="_blank">sign up for the service</a> and obtain an API key. To disable http:BL use, remove the API key from your settings.';]]></search>
			<add><![CDATA[$helptxt['badbehavior_reverse_proxy_addresses'] = 'In some server farm configurations, Bad Behavior may be unable to determine whether a remote request originated from your reverse proxy/load balancer or arrived directly. In this case you should add all of the internal IP addresses for your reverse proxy/load balancer servers as seen from the origin server. These can usually be omitted; however if you have a configuration where some requests can bypass the reverse proxy/load balancer and connect to the origin server directly, then you should use this option. You should also use this option when incoming requests pass through two or more reverse proxies before reaching the origin server.<br /><br />Enter each IP address or CIDR netblocks separated by a | (1.2.3.4|5.4.3.2/27)';
$helptxt['badbehavior_reverse_proxy_header'] = 'When a reverse proxy is in use, Bad Behavior looks at this HTTP header to determine the actual source IP address for each web request. Your reverse proxy or load balancer must add an HTTP header containing the remote IP address where the connection originated. Most do this by default; check the configuration for your reverse proxy or load balancer to ensure that this header is sent.<br /><br />If you use the CloudFlare service, you should change this option to CF-Connecting-IP.';
$helptxt['badbehavior_reverse_proxy'] = 'When enabled, Bad Behavior will assume it is receiving a connection from a reverse proxy, when a specific HTTP header is received.';
$helptxt['badbehavior_httpbl_maxage'] = 'This is the number of days since suspicious activity was last observed from an IP address by Project Honey Pot. Bad Behavior will block requests with a maximum age equal to or less than this setting.';
$helptxt['badbehavior_httpbl_threat'] = 'This number provides a measure of how suspicious an IP address is, based on activity observed at Project Honey Pot. Bad Behavior will block requests with a threat level equal or higher to this setting. Project Honey Pot has <a href="http://www.projecthoneypot.org/threat_info.php" target="_blank">more information on this parameter</a>.';
$helptxt['badbehavior_httpbl_key'] = 'Bad Behavior is capable of using data from the <a href="http://www.projecthoneypot.org/faq.php#g" target="_blank">http:BL</a> service provided by <a href="http://www.projecthoneypot.org/" target="_blank">Project Honey Pot</a> to screen requests.<br /><br />This is purely optional; however if you wish to use it, you must <a href="http://www.projecthoneypot.org/httpbl_configure.php" target="_blank">sign up for the service</a> and obtain an API key. To disable http:BL use, remove the API key from your settings.';]]></add>
		</operation>
	</file>
	<file name="LANGUAGEDIR/english/LikePosts.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['like_post_tab_mlb'] = 'Most liked board';
$txt['like_post_tab_mlmember'] = 'Most Liked Members';
$txt['like_post_tab_mlgmember'] = 'Most Like Giving Members';
$txt['like_post_generic_heading1'] = 'like(s) so far';
$txt['like_post_liked_by_others'] = 'Likes received';
$txt['like_post_show'] = 'Show';
$txt['like_post_hide'] = 'Hide';

// For message
$txt['like_post_users_who_liked'] = 'users who liked this post';

// For topic
$txt['like_post_most_popular_topic_heading1'] = 'has received a total of (%1%) like(s) so far.';
$txt['like_post_most_popular_topic_sub_heading1'] = 'The topic contains (%1%) liked posts.  %2% some of the liked posts from it.';

// For board
$txt['like_post_most_popular_board_heading1'] = 'has received';
$txt['like_post_most_popular_board_sub_heading1'] = 'The board contains';
$txt['like_post_most_popular_board_sub_heading2'] = 'different topics, out which';
$txt['like_post_most_popular_board_sub_heading3'] = 'topics are liked.';
$txt['like_post_most_popular_board_sub_heading4'] = 'Furthermore, these topic contains';
$txt['like_post_most_popular_board_sub_heading5'] = 'different posts, out of which';
$txt['like_post_most_popular_board_sub_heading6'] = 'posts are liked so far. Few of the liked topics from it';

// Most liked user
$txt['like_post_total_likes_received'] = 'Total Likes Received';
$txt['like_post_most_popular_user_heading1'] = '%1% some of this users most liked postings';

// Most like giving user
$txt['like_post_total_likes_given'] = 'Total Likes Given';
$txt['like_post_most_like_given_user_heading1'] = '%1% some of this users recently liked posts';

// Like posts generic strings
$txt['like_post_topic'] = 'Topic';]]></search>
			<add><![CDATA[$txt['like_post_tab_mlb'] = 'Most liked board';
$txt['like_post_tab_mlmember'] = 'Most Liked Members';
$txt['like_post_tab_mlgmember'] = 'Most Like Giving Members';
$txt['like_post_generic_heading1'] = 'like(s)';
$txt['like_post_liked_by_others'] = 'Likes received';
$txt['like_post_show'] = 'Show';
$txt['like_post_hide'] = 'Hide';

// For message
$txt['like_post_users_who_liked'] = '%1% users liked this post';

// For topic
$txt['like_post_most_popular_topic_heading1'] = 'has received a total of (%1%) like(s).';
$txt['like_post_most_popular_topic_sub_heading1'] = 'The topic contains (%1%) liked posts.  %2% some of the liked posts from it.';

// For board
$txt['like_post_most_popular_board_heading1'] = 'has received';
$txt['like_post_most_popular_board_sub_heading1'] = 'The board contains';
$txt['like_post_most_popular_board_sub_heading2'] = 'topics, out of which';
$txt['like_post_most_popular_board_sub_heading3'] = 'topics are liked.';
$txt['like_post_most_popular_board_sub_heading4'] = 'The topics contain';
$txt['like_post_most_popular_board_sub_heading5'] = 'different posts, of which';
$txt['like_post_most_popular_board_sub_heading6'] = 'posts are liked.';

// Most liked user
$txt['like_post_total_likes_received'] = 'Total Likes Received';
$txt['like_post_most_popular_user_heading1'] = '%1% this users most liked postings';

// Most like giving user
$txt['like_post_total_likes_given'] = 'Total Likes Given';
$txt['like_post_most_like_given_user_heading1'] = '%1% this users recently liked posts';

// Like posts generic strings
$txt['like_post_topic'] = 'Topic';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
// Error msgs
$txt['like_post_error_no_data'] = 'Sorry, it looks like there is nothing to show yet!';
$txt['like_post_error_something_wrong'] = 'Sorry, it looks like there is a problem retrieving the data...';]]></search>
			<add><![CDATA[
// Error msgs
$txt['like_post_error_no_data'] = 'Sorry, it looks like there is nothing to show yet!';
$txt['like_post_error_something_wrong'] = 'Sorry, it looks like there is a problem retrieving the data...';]]></add>
		</operation>
	</file>
	<file name="LANGUAGEDIR/english/ManageSettings.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['karmaMinPosts'] = 'Set the minimum posts needed to modify karma';
$txt['karmaWaitTime'] = 'Set wait time in hours';
$txt['karmaTimeRestrictAdmins'] = 'Restrict administrators to wait time';
$txt['karmaDisableSmite'] = 'Disable the ability for memebers to smite';
$txt['karmaLabel'] = 'Karma label';
$txt['karmaApplaudLabel'] = 'Karma applaud label';
$txt['karmaSmiteLabel'] = 'Karma smite label';]]></search>
			<add><![CDATA[$txt['karmaMinPosts'] = 'Set the minimum posts needed to modify karma';
$txt['karmaWaitTime'] = 'Set wait time in hours';
$txt['karmaTimeRestrictAdmins'] = 'Restrict administrators to wait time';
$txt['karmaDisableSmite'] = 'Disable the ability for members to smite';
$txt['karmaLabel'] = 'Karma label';
$txt['karmaApplaudLabel'] = 'Karma applaud label';
$txt['karmaSmiteLabel'] = 'Karma smite label';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['badbehavior_httpbl_threat_desc'] = '(default 25)';
$txt['badbehavior_httpbl_maxage'] = 'http:BL Maximum Age';
$txt['badbehavior_httpbl_maxage_desc'] = '(default 30)';
$txt['badbehavior_eucookie'] = 'Check to enable EU Cookie Handling';
$txt['badbehavior_reverse_proxy'] = 'Enable Reverse Proxy';
$txt['badbehavior_reverse_proxy_header'] = 'Reverse Proxy Header';
$txt['badbehavior_reverse_proxy_header_desc'] = '(default X-Forwarded-For)';]]></search>
			<add><![CDATA[$txt['badbehavior_httpbl_threat_desc'] = '(default 25)';
$txt['badbehavior_httpbl_maxage'] = 'http:BL Maximum Age';
$txt['badbehavior_httpbl_maxage_desc'] = '(default 30)';
$txt['badbehavior_reverse_proxy'] = 'Enable Reverse Proxy';
$txt['badbehavior_reverse_proxy_header'] = 'Reverse Proxy Header';
$txt['badbehavior_reverse_proxy_header_desc'] = '(default X-Forwarded-For)';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['setting_qa_verification_number'] = 'Number of verification questions user must answer';
$txt['setting_qa_verification_number_desc'] = '(0 to disable; questions are set below)';
$txt['configure_verification_means_desc'] = '<span class="smalltext">Below you can set which anti-spam features you wish to have enabled whenever a user needs to verify they are a human. Note that the user will have to pass <em>all</em> verification so if you enable both a verification image and a question/answer test they need to complete both to proceed.</span>';
$txt['setting_visual_verification_num_chars'] = 'Number of characters in the verification image';
$txt['setting_visual_verification_type'] = 'Visual verification image to display';
$txt['setting_visual_verification_type_desc'] = 'The more complex the image the harder it is for bots to bypass';]]></search>
			<add><![CDATA[$txt['setting_qa_verification_number'] = 'Number of verification questions user must answer';
$txt['setting_qa_verification_number_desc'] = '(0 to disable; questions are set below)';
$txt['configure_verification_means_desc'] = '<span class="smalltext">Below you can set which anti-spam features you wish to have enabled whenever a user needs to verify they are a human. Note that the user will have to pass <em>all</em> verification so if you enable both a verification image and a question/answer test they need to complete both to proceed.</span>';
$txt['configure_captcha'] = 'Verification CAPTCHA';
$txt['setting_visual_verification_num_chars'] = 'Number of characters in the verification image';
$txt['setting_visual_verification_type'] = 'Visual verification image to display';
$txt['setting_visual_verification_type_desc'] = 'The more complex the image the harder it is for bots to bypass';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['setting_image_verification_high'] = 'High - Angled letters, considerable noise/lines';
$txt['setting_image_verification_extreme'] = 'Extreme - Angled letters, noise, lines and blocks';
$txt['setting_image_verification_sample'] = 'Sample';
$txt['setting_image_verification_nogd'] = '<strong>Note:</strong> as this server does not have the GD library installed the different complexity settings will have no effect.';
$txt['setup_verification_questions'] = 'Verification Questions';
$txt['setup_verification_questions_desc'] = '<span class="smalltext">If you want users to answer verification questions in order to stop spam bots you should setup a number of questions in the table below. You should pick relatively simple questions; answers are not case sensitive. You may use BBC in the questions for formatting, to remove a question simply delete the contents of that line.</span>';
$txt['setup_verification_question'] = 'Question';]]></search>
			<add><![CDATA[$txt['setting_image_verification_high'] = 'High - Angled letters, considerable noise/lines';
$txt['setting_image_verification_extreme'] = 'Extreme - Angled letters, noise, lines and blocks';
$txt['setting_image_verification_sample'] = 'Sample';
$txt['setup_verification_questions'] = 'Verification Questions';
$txt['setup_verification_questions_desc'] = '<span class="smalltext">If you want users to answer verification questions in order to stop spam bots you should setup a number of questions in the table below. You should pick relatively simple questions; answers are not case sensitive. You may use BBC in the questions for formatting, to remove a question simply delete the contents of that line.</span>';
$txt['setup_verification_question'] = 'Question';]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/scripts/elk_jquery_embed.js">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 * Original code from Aziz, redone and refactored for ElkArte
 */]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 *
 * Original code from Aziz, redone and refactored for ElkArte
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[/**
 * This javascript searches the message for video links and replaces them
 * with a clickable preview thumbnail of the video.  Once the image is clicked
 * the video is embeded in to the page to play.
 *
 * Currently works with youtube, vimeo and dailymotion
 *
 * @param {object} oInstanceSettings holds the text strings to use in the html created
 * @param {int} msgid optional to only search for links in a specific id
 */
 (function($) {
	'use strict';
	$.fn.linkifyvideo = function(oInstanceSettings, msgid) {
		var oDefaultsSettings = {
			preview_image : '',
			ctp_video : '',
			hide_video : '',]]></search>
			<add><![CDATA[/**
 * This javascript searches the message for video links and replaces them
 * with a clickable preview thumbnail of the video.  Once the image is clicked
 * the video is embedded in to the page to play.
 *
 * Currently works with youtube, vimeo and dailymotion
 *
 */
 (function($) {
	'use strict';

	/**
	 * @param {object} oInstanceSettings holds the text strings to use in the html created
	 * @param {int} msgid optional to only search for links in a specific id
	 */
	$.fn.linkifyvideo = function(oInstanceSettings, msgid) {
		var oDefaultsSettings = {
			embed_limit : 25,
			preview_image : '',
			ctp_video : '',
			hide_video : '',]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}

		var domain_regex = /^[^:]*:\/\/(?:www\.)?([^\/]+)(\/.*)$/,
			embed_html = '<div class="elk_video"><iframe width="640px" height="385px" style="max-width: 98%; max-height: auto;" src="{src}" frameborder="0" allowfullscreen></iframe></div>',
			handlers = {};
		handlers['youtube.com'] = function(path, a, embed) {
			var videoID = path.match(/\bv[=/]([^&#?$]+)/i) || path.match(/#p\/(?:a\/)?[uf]\/\d+\/([^?$]+)/i) || path.match(/(?:\/)([\w-]{11})/i);
			if (!videoID || !(videoID = videoID[1]))]]></search>
			<add><![CDATA[		}

		var domain_regex = /^[^:]*:\/\/(?:www\.)?([^\/]+)(\/.*)$/,
			already_embedded = 0,
			embed_html = '<div class="elk_video"><iframe width="640px" height="385px" style="max-width: 98%; max-height: 100%;" src="{src}" frameborder="0" allowfullscreen></iframe></div>',
			handlers = {};

		// Youtube and variants link handler
		handlers['youtube.com'] = function(path, a, embed) {
			var videoID = path.match(/\bv[=/]([^&#?$]+)/i) || path.match(/#p\/(?:a\/)?[uf]\/\d+\/([^?$]+)/i) || path.match(/(?:\/)([\w-]{11})/i);
			if (!videoID || !(videoID = videoID[1]))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// http://youtu.be/lLOE3fBZcUU?t=1m37s when you click share underneath the video
			// http://youtu.be/lLOE3fBZcUU?t=97 when you right click on a video and choose "Copy video URL at current time"
			// For embedding, you need to use "?start=97" instead, so we have to convert t=1m37s to seconds while also supporting t=97
			var startAt = path.match(/t=(?:([1-9]{1,2})h)?(?:([1-9]{1,2})m)?(?:([1-9]+)s?)/);
			var startAtPar = '';
			if (startAt)
			{
				var startAtSeconds = 0;]]></search>
			<add><![CDATA[			// http://youtu.be/lLOE3fBZcUU?t=1m37s when you click share underneath the video
			// http://youtu.be/lLOE3fBZcUU?t=97 when you right click on a video and choose "Copy video URL at current time"
			// For embedding, you need to use "?start=97" instead, so we have to convert t=1m37s to seconds while also supporting t=97
			var startAt = path.match(/t=(?:([1-9]{1,2})h)?(?:([1-9]{1,2})m)?(?:([1-9]+)s?)/),
				startAtPar = '';
			if (startAt)
			{
				var startAtSeconds = 0;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		};
		handlers['m.youtube.com'] = handlers['youtube.com'];
		handlers['youtu.be'] = handlers['youtube.com'];
		handlers['vimeo.com'] = function(path, a, embed) {
			var videoID = path.match(/^\/(\d+)/i);
			if (!videoID || !(videoID = videoID[1]))]]></search>
			<add><![CDATA[		};
		handlers['m.youtube.com'] = handlers['youtube.com'];
		handlers['youtu.be'] = handlers['youtube.com'];

		// Vimeo link handler
		handlers['vimeo.com'] = function(path, a, embed) {
			var videoID = path.match(/^\/(\d+)/i);
			if (!videoID || !(videoID = videoID[1]))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			return [oSettings.vimeo, tag];
		};
		handlers['dailymotion.com'] = function(path, a, embed) {
			var videoID = path.match(/^\/(?:video|swf)\/([a-z0-9]{1,18})/i);
			if (!videoID || !(videoID = videoID[1]))]]></search>
			<add><![CDATA[
			return [oSettings.vimeo, tag];
		};

		// Dailymotion link handler
		handlers['dailymotion.com'] = function(path, a, embed) {
			var videoID = path.match(/^\/(?:video|swf)\/([a-z0-9]{1,18})/i);
			if (!videoID || !(videoID = videoID[1]))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			links = $('[id^=msg_] a');

		// Create the show/hide button
		var showhideBtn = $('<a class="floatright" title="' + oSettings.hide_video + '"><img src="' + elk_images_url + '/selected.png"></a>').on('click', function() {
				var $img = $(this).find("img"),
					$vid = $(this).parent().next();
]]></search>
			<add><![CDATA[			links = $('[id^=msg_] a');

		// Create the show/hide button
		var showhideBtn = $('<a class="floatright" title="' + oSettings.hide_video + '"><img alt=">" src="' + elk_images_url + '/selected.png"></a>').on('click', function() {
				var $img = $(this).find("img"),
					$vid = $(this).parent().next();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				args = null;

			// One of our video provider domains?
			if (m !== null && typeof(handlers[m[1]]) !== "undefined" && handlers[m[1]] !== null)
			{
				// Call the handeler and get the tag to insert
				handler = handlers[m[1]];

				args = handler(m[2], tag, false);
				if (args)
				{
					$(tag).wrap('<div class="elk_videoheader">').text(args[0]).after(showhideBtn.clone(true));
					$(tag).parent().after(args[1]);
				}]]></search>
			<add><![CDATA[				args = null;

			// One of our video provider domains?
			if (already_embedded < oSettings.embed_limit && m !== null && typeof(handlers[m[1]]) !== "undefined" && handlers[m[1]] !== null)
			{
				// Call the handler and get the tag to insert
				handler = handlers[m[1]];

				args = handler(m[2], tag, false);
				if (args)
				{
					already_embedded++;
					$(tag).wrap('<div class="elk_videoheader">').text(args[0]).after(showhideBtn.clone(true));
					$(tag).parent().after(args[1]);
				}]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/scripts/jquery.captcha.js">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 */

/**]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'letterCount' : 5,
			'uniqueID' : '',
			'imageURL' : '',
			'useLibrary' : false,
			'refreshevent': 'click',
			'playevent': 'click',
			'admin': false]]></search>
			<add><![CDATA[			'letterCount' : 5,
			'uniqueID' : '',
			'imageURL' : '',
			'refreshevent': 'click',
			'playevent': 'click',
			'admin': false]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							new_url = new_url + hexstr.substr(Math.floor(Math.random() * 16), 1);
					}

					if (settings.useLibrary)
					{
						$('#verification_image' + uniqueID).attr('src', new_url);
					}
					else if (document.getElementById("verification_image" + uniqueID))
					{
						for (i = 1; i <= settings.letterCount; i++)
							if (document.getElementById("verification_image" + uniqueID + "_" + i))
								document.getElementById("verification_image" + uniqueID + "_" + i).src = new_url + ";letter=" + i;
					}
				});
			}
		});]]></search>
			<add><![CDATA[							new_url = new_url + hexstr.substr(Math.floor(Math.random() * 16), 1);
					}

					$('#verification_image' + uniqueID).attr('src', new_url);
				});
			}
		});]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/scripts/like_posts.js">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 */

/**]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						'   </div>' +
						'   <div class="separator"></div>' +
						'   <div class="well">' +
						'       <p>' + data[i].member_liked_data.length + ' ' + txtStrings.usersWhoLiked + '</p>';

					// All the members that liked this masterpiece of internet jibba jabba
					for (var j = 0, likerslen = data[i].member_liked_data.length; j < likerslen; j++) {]]></search>
			<add><![CDATA[						'   </div>' +
						'   <div class="separator"></div>' +
						'   <div class="well">' +
						'       <p>' + txtStrings.usersWhoLiked.easyReplace({1 : data[i].member_liked_data.length}) + '</p>';

					// All the members that liked this masterpiece of internet jibba jabba
					for (var j = 0, likerslen = data[i].member_liked_data.length; j < likerslen; j++) {]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						'       <div class="content forumposts">' +
						'	        <div class="topic_details">' +
						'                <h5 class="like_stats_likers">' +
						txtStrings.postedAt + ' ' + data[i].post_data[j].html_time + ': ' + txtStrings.likesReceived + ' (' + data[i].post_data[j].like_count + ')' +
						'               </h5>' +
						'           </div>' +
						'          <div class="inner">' + data[i].post_data[j].body + '</div>' +]]></search>
			<add><![CDATA[						'       <div class="content forumposts">' +
						'	        <div class="topic_details">' +
						'                <h5 class="like_stats_likers">' +
						txtStrings.postedAt + ' ' + data[i].post_data[j].html_time + ' - ' + data[i].post_data[j].like_count + ' ' + txtStrings.likesReceived +
						'               </h5>' +
						'           </div>' +
						'          <div class="inner">' + data[i].post_data[j].body + '</div>' +]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/scripts/mentioning.plugin.js">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 */

/**]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			})
			.done(function(data) {
				$(data).find('item').each(function (idx, item) {
					if (typeof oMentions.opts._names[oMentions.opts._names.length] === 'undefined')
						oMentions.opts._names[oMentions.opts._names.length] = {};

					oMentions.opts._names[oMentions.opts._names.length - 1] = {
						"id": $(item).attr('id'),
						"name": $(item).text()
					};]]></search>
			<add><![CDATA[			})
			.done(function(data) {
				$(data).find('item').each(function (idx, item) {
					oMentions.opts._names[idx] = {
						"id": $(item).attr('id'),
						"name": $(item).text()
					};]]></add>
		</operation>
	</file>
</modification>